crystal_doc_search_index_callback({"repository_name":"cgl","body":"# Crystal Graph Library (CGL)\n\n[![Build Status](https://github.com/RomainFranceschini/cgl/workflows/CGL%20CI/badge.svg?branch=master)](https://github.com/RomainFranceschini/cgl/actions)\n\nCGL is a Crystal library for the creation and manipulation of graph data structures.\n\nAll graph data structures are based on an adjacency list representation and heavily rely on Crystal `Hash` data structure.\n\n## Features\n\n  - [x] Data structures for graphs, digraphs and ~~multigraphs~~\n  - [x] Nodes can be anything\n  - [x] Edges can be weighted and/or hold arbitrary data as labels\n  - [x] Generic interface for accessing concrete data structures (see `CGL::IGraph`)\n  - [x] Generic interface for traversing graphs (iterators, visitor)\n  - [ ] Standard graph algorithms\n  - [ ] Support hypergraphs\n\n## Documentation\n\n* [API](https://romainfranceschini.github.io/cgl/)\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     cgl:\n       github: RomainFranceschini/cgl\n   ```\n\n2. Run `shards install`\n\n## Usage\n\nImport the CGL module with :\n\n```crystal\nrequire \"cgl\"\n```\n\nDirected and undirected graphs types are provided. For each of those, multiple\nvariants are offered so users can carefully select the ones that consume the\nleast memory for their needs.\n\n### Undirected graphs\n\nThe following classes all implements *undirected* graphs. They allow self-loop\nedges that connects a vertex to itself. They ignore multiple edges between\ntwo vertices.\n\n* The `Graph` class implements an *undirected* graph. Edges cannot be weighted\n  nor labeled.\n\n  ```crystal\n  g = Graph(Char).new(edges: { {'a','b'}, {'a','f'}, {'f','b'} })\n  g.add_edge 'b', 'b'\n  g.add_vertex 'e'\n  g.order # => 5\n  g.size  # => 4\n  ```\n\n* The `WeightedGraph` class implements an *undirected* graph where edges can be\n  weighted with a `Number::Primitive` type.\n\n  ```crystal\n  g = WeightedGraph(Char, Int32).new(default_weight: 10)\n  g.add_edge 'b', 'b', 1\n  g.add_edge 'a', 'b'\n  g.weight_of('b', 'b') # => 1\n  g.weight_of('a', 'b') # => 10\n  ```\n\n* The `LabeledGraph` class implements an *undirected* graph where edges can be\n  labeled, e.g. they can hold arbitrary data of any chosen type.\n\n  ```crystal\n  g = LabeledGraph(String, Char).new(default_label: 'üëÄ')\n  g.add_edge \"hello\", \"world\", label: 'üëç'\n  g.add_edge \"hello\", \"folks\", label: 'üëé'\n  g.add_edge \"hello\", \"martians\"\n  g.label_of(\"hello\", \"martians\") # => üëÄ\n  ```\n\n* Finally, the `WeightedLabeledGraph` class implements an *undirected* graph\n  where edges can both be weighted and labeled. Yay!\n\n  ```crystal\n  g = WeightedLabeledGraph(String, Char).new(default_weight: 10, default_label: 'üëÄ')\n  g.add_edge \"hello\", \"world\", weight: 1, label: 'üëç'\n  g.add_edge \"hello\", \"folks\", label: 'üëé'\n  ```\n\n### Directed graphs\n\nThe following classes all implements *directed* graphs. They allow self-loop\nedges, that connects a vertex to itself. They ignore multiple edges between\ntwo vertices.\n\n* The `DiGraph` class implements a *directed* graph. Edges cannot be weighted\n  nor labeled.\n\n  ```crystal\n  g = DiGraph(Char).new(edges: { {'a','b'}, {'a','c'}, {'c','b'} })\n  ```\n\n* The `WeightedDiGraph` class implements a *directed* graph where edges can be\n  weighted with a `Number::Primitive` type.\n\n  ```crystal\n  g = WeightedDiGraph(Char, UInt8).new(default_weight: 1u8)\n  ```\n\n* The `LabeledDiGraph` class implements a *directed* graph where edges can be\n  labeled, e.g. they can hold arbitrary data of any chosen type.\n\n  ```crystal\n  g = LabeledDiGraph(String, Char).new(default_label: 'üëÄ')\n  g.add_edge \"hello\", \"world\", label: 'üëç'\n  ```\n\n* Finally, the `WeightedLabeledDiGraph` class implements a *directed* graph where\n  edges can both be weighted and labeled. Yay!\n\n  ```crystal\n  g = WeightedLabeledDiGraph(String, Char).new(default_weight: 10, default_label: 'üëÄ')\n  ```\n\n### Multigraphs and Hypergraphs\n\nTBD\n\n## Contributing\n\n1. Fork it (<https://github.com/RomainFranceschini/cgl/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Romain Franceschini](https://github.com/RomainFranceschini) - creator and maintainer\n","program":{"html_id":"cgl/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cgl","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"cgl/CGL","path":"CGL.html","kind":"module","full_name":"CGL","name":"CGL","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/cgl.cr","line_number":12,"url":null},{"filename":"src/cgl/algorithms/components/connected.cr","line_number":20,"url":null},{"filename":"src/cgl/algorithms/components/strongly_connected.cr","line_number":1,"url":null},{"filename":"src/cgl/algorithms/paths/shortest.cr","line_number":1,"url":null},{"filename":"src/cgl/algorithms/paths/simple.cr","line_number":1,"url":null},{"filename":"src/cgl/digraph.cr","line_number":1,"url":null},{"filename":"src/cgl/edges.cr","line_number":1,"url":null},{"filename":"src/cgl/errors.cr","line_number":1,"url":null},{"filename":"src/cgl/format/dot.cr","line_number":1,"url":null},{"filename":"src/cgl/graph.cr","line_number":1,"url":null},{"filename":"src/cgl/igraph.cr","line_number":1,"url":null},{"filename":"src/cgl/representations/adjacency.cr","line_number":1,"url":null},{"filename":"src/cgl/traversal/breadth_first_search.cr","line_number":3,"url":null},{"filename":"src/cgl/traversal/depth_first_search.cr","line_number":3,"url":null},{"filename":"src/cgl/traversal/iterators.cr","line_number":1,"url":null},{"filename":"src/cgl/traversal/visitor.cr","line_number":1,"url":null},{"filename":"src/cgl/utils/binary_heap.cr","line_number":1,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"cgl/CGL/AbstractDiGraph","path":"CGL/AbstractDiGraph.html","kind":"class","full_name":"CGL::AbstractDiGraph(V)","name":"AbstractDiGraph","abstract":true,"superclass":{"html_id":"cgl/CGL/AnyGraph","kind":"class","full_name":"CGL::AnyGraph","name":"AnyGraph"},"ancestors":[{"html_id":"cgl/CGL/AnyGraph","kind":"class","full_name":"CGL::AnyGraph","name":"AnyGraph"},{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/algorithms/components/connected.cr","line_number":60,"url":null},{"filename":"src/cgl/algorithms/components/strongly_connected.cr","line_number":2,"url":null},{"filename":"src/cgl/igraph.cr","line_number":339,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"cgl/CGL/AdjacencyDiGraph","kind":"class","full_name":"CGL::AdjacencyDiGraph(V, W, L)","name":"AdjacencyDiGraph"}],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"count_strongly_connected_components:Int32-instance-method","html_id":"count_strongly_connected_components:Int32-instance-method","name":"count_strongly_connected_components","doc":"Returns the number of **strongly** connected components in `self`.","summary":"<p>Returns the number of <strong>strongly</strong> connected components in <code>self</code>.</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/cgl/algorithms/components/strongly_connected.cr","line_number":69,"url":null},"def":{"name":"count_strongly_connected_components","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"each_strongly_connected_component.size"}},{"id":"count_weakly_connected_components:Int32-instance-method","html_id":"count_weakly_connected_components:Int32-instance-method","name":"count_weakly_connected_components","doc":"Returns the number of **weakly** connected components in `self`.","summary":"<p>Returns the number of <strong>weakly</strong> connected components in <code>self</code>.</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/cgl/algorithms/components/connected.cr","line_number":64,"url":null},"def":{"name":"count_weakly_connected_components","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"each_weakly_connected_component.size"}},{"id":"degree_of(v:V):Int32-instance-method","html_id":"degree_of(v:V):Int32-instance-method","name":"degree_of","doc":"Returns the degree of the given vertex *v*.\n\nFor directed graphs, the value equals `#out_degree_of`.\n\nFor undirected graphs, the value is the sum of `#in_degree_of` and\n`#in_degree_of`.","summary":"<p>Returns the degree of the given vertex <em>v</em>.</p>","abstract":false,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(v : V) : Int32","args_html":"(v : V) : Int32","location":{"filename":"src/cgl/igraph.cr","line_number":359,"url":null},"def":{"name":"degree_of","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"(in_degree_of(v)) + (out_degree_of(v))"}},{"id":"density:Float64-instance-method","html_id":"density:Float64-instance-method","name":"density","doc":"Returns the density of `self`.\n\nSelf loops are counted in the total number of edges so graphs with self\nloops can have density higher than 1.","summary":"<p>Returns the density of <code>self</code>.</p>","abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/cgl/igraph.cr","line_number":363,"url":null},"def":{"name":"density","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"if empty?\n  return 0.0\nend\nn = self.order\nm = self.size\n(m / n) * (n - 1)\n"}},{"id":"directed?:Bool-instance-method","html_id":"directed?:Bool-instance-method","name":"directed?","doc":"Whether `self` is directed.","summary":"<p>Whether <code>self</code> is directed.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/cgl/igraph.cr","line_number":340,"url":null},"def":{"name":"directed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"true"}},{"id":"each_edge(&:AnyEdge(V)->)-instance-method","html_id":"each_edge(&:AnyEdge(V)->)-instance-method","name":"each_edge","doc":"Yields each edges in the graph.","summary":"<p>Yields each edges in the graph.</p>","abstract":false,"args":[],"args_string":"(& : AnyEdge(V) -> )","args_html":"(& : <a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V) -> )","location":{"filename":"src/cgl/igraph.cr","line_number":344,"url":null},"def":{"name":"each_edge","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(AnyEdge(V) -> )"},"return_type":"","visibility":"Public","body":"each_vertex do |u|\n  each_adjacent(u) do |v|\n    yield unchecked_edge(u, v)\n  end\nend"}},{"id":"each_edge_from(u:V,&:AnyEdge(V)->)-instance-method","html_id":"each_edge_from(u:V,&:AnyEdge(V)->)-instance-method","name":"each_edge_from","doc":"Yields each edge incident to *u* in the graph.","summary":"<p>Yields each edge incident to <em>u</em> in the graph.</p>","abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"}],"args_string":"(u : V, & : AnyEdge(V) -> )","args_html":"(u : V, & : <a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V) -> )","location":{"filename":"src/cgl/igraph.cr","line_number":355,"url":null},"def":{"name":"each_edge_from","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(AnyEdge(V) -> )"},"return_type":"","visibility":"Public","body":"each_adjacent(u) do |v|\n  yield unchecked_edge(u, v)\nend"}},{"id":"each_strongly_connected_component(&)-instance-method","html_id":"each_strongly_connected_component(&)-instance-method","name":"each_strongly_connected_component","doc":"Yields each **strongly** connected component of `self` as an `Array'.\n\nNote: Based on (Tarjan, 1972) and (Nuutila and Soisalon-Soinen, 1994)","summary":"<p>Yields each <strong>strongly</strong> connected component of <code>self</code> as an `Array'.</p>","abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/cgl/algorithms/components/strongly_connected.cr","line_number":6,"url":null},"def":{"name":"each_strongly_connected_component","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"preorder = Hash(V, Int32).new\nlowlink = Hash(V, Int32).new\nfound = Set(V).new\nto_visit = Deque(V).new\ni = 0\neach_vertex do |source|\n  if found.includes?(source)\n  else\n    queue = Deque(V) {source}\n    while !queue.empty?\n      u = queue.last\n      if preorder.has_key?(u)\n      else\n        i = i + 1\n        preorder[u] = i\n      end\n      done = true\n      each_adjacent(u) do |v|\n        if preorder.has_key?(v)\n        else\n          queue.push(v)\n          done = false\n          break\n        end\n      end\n      if done\n        lowlink[u] = preorder[u]\n        each_adjacent(u) do |v|\n          if found.includes?(v)\n          else\n            lowlink[u] = if preorder[v] > preorder[u]\n              Math.min(lowlink[u], lowlink[v])\n            else\n              Math.min(lowlink[u], preorder[v])\n            end\n          end\n        end\n        queue.pop\n        if lowlink[u] == preorder[u]\n          strong_component = Array(V) {u}\n          while (!to_visit.empty?) && preorder[to_visit.last] > preorder[u]\n            v = to_visit.pop\n            strong_component << v\n          end\n          found.concat(strong_component)\n          yield strong_component\n        else\n          to_visit.push(u)\n        end\n      end\n    end\n  end\nend\n"}},{"id":"each_strongly_connected_component:Iterator(Array(V))-instance-method","html_id":"each_strongly_connected_component:Iterator(Array(V))-instance-method","name":"each_strongly_connected_component","doc":"Returns an iterator of **strongly** connected components.","summary":"<p>Returns an iterator of <strong>strongly</strong> connected components.</p>","abstract":false,"args":[],"args_string":" : Iterator(Array(V))","args_html":" : Iterator(Array(V))","location":{"filename":"src/cgl/algorithms/components/strongly_connected.cr","line_number":64,"url":null},"def":{"name":"each_strongly_connected_component","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Array(V))","visibility":"Public","body":"SCCIterator(V).new(self)"}},{"id":"each_successor(u:V,&block:V->)-instance-method","html_id":"each_successor(u:V,&block:V->)-instance-method","name":"each_successor","doc":"Yields each successor of *u* in the graph.","summary":"<p>Yields each successor of <em>u</em> in the graph.</p>","abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"}],"args_string":"(u : V, &block : V -> )","args_html":"(u : V, &block : V -> )","location":{"filename":"src/cgl/igraph.cr","line_number":351,"url":null},"def":{"name":"each_successor","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(V -> )"},"return_type":"","visibility":"Public","body":"each_adjacent(&block)"}},{"id":"each_weakly_connected_component(&)-instance-method","html_id":"each_weakly_connected_component(&)-instance-method","name":"each_weakly_connected_component","doc":"Yields each connected component of `self` as an `Array'.","summary":"<p>Yields each connected component of <code>self</code> as an `Array'.</p>","abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/cgl/algorithms/components/connected.cr","line_number":61,"url":null},"def":{"name":"each_weakly_connected_component","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"colors = Hash(V, Color).new(Color::White, self.order)\neach_vertex do |vroot|\n  if colors[vroot].black?\n  else\n    component = [] of V\n    depth_first_search(vroot, colors: colors) do |v|\n      component << v\n    end\n    yield component\n  end\nend\n"}},{"id":"each_weakly_connected_component:Iterator(Array(V))-instance-method","html_id":"each_weakly_connected_component:Iterator(Array(V))-instance-method","name":"each_weakly_connected_component","doc":"Returns an `Iterator` of connected components.","summary":"<p>Returns an <code>Iterator</code> of connected components.</p>","abstract":false,"args":[],"args_string":" : Iterator(Array(V))","args_html":" : Iterator(Array(V))","location":{"filename":"src/cgl/algorithms/components/connected.cr","line_number":61,"url":null},"def":{"name":"each_weakly_connected_component","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Array(V))","visibility":"Public","body":"ComponentsIterator(V).new(self)"}},{"id":"strongly_connected?:Bool-instance-method","html_id":"strongly_connected?:Bool-instance-method","name":"strongly_connected?","doc":"Whether self is **strongly** connected.","summary":"<p>Whether self is <strong>strongly</strong> connected.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/cgl/algorithms/components/strongly_connected.cr","line_number":74,"url":null},"def":{"name":"strongly_connected?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if empty?\n  return false\nend\nscc = each_strongly_connected_component.first\nscc.size == self.order\n"}},{"id":"weakly_connected?:Bool-instance-method","html_id":"weakly_connected?:Bool-instance-method","name":"weakly_connected?","doc":"Whether `self` is **weakly** connected.","summary":"<p>Whether <code>self</code> is <strong>weakly</strong> connected.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/cgl/algorithms/components/connected.cr","line_number":69,"url":null},"def":{"name":"weakly_connected?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if empty?\n  return false\nend\n(depth_first_search(self.each_vertex.first)).size == self.order\n"}}],"macros":[],"types":[]},{"html_id":"cgl/CGL/AbstractGraph","path":"CGL/AbstractGraph.html","kind":"class","full_name":"CGL::AbstractGraph(V)","name":"AbstractGraph","abstract":true,"superclass":{"html_id":"cgl/CGL/AnyGraph","kind":"class","full_name":"CGL::AnyGraph","name":"AnyGraph"},"ancestors":[{"html_id":"cgl/CGL/AnyGraph","kind":"class","full_name":"CGL::AnyGraph","name":"AnyGraph"},{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/algorithms/components/connected.cr","line_number":45,"url":null},{"filename":"src/cgl/igraph.cr","line_number":301,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"cgl/CGL/AdjacencyGraph","kind":"class","full_name":"CGL::AdjacencyGraph(V, W, L)","name":"AdjacencyGraph"}],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"connected?:Bool-instance-method","html_id":"connected?:Bool-instance-method","name":"connected?","doc":"Whether `self` is connected.","summary":"<p>Whether <code>self</code> is connected.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/cgl/algorithms/components/connected.cr","line_number":54,"url":null},"def":{"name":"connected?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if empty?\n  return false\nend\n(depth_first_search(self.each_vertex.first)).size == self.order\n"}},{"id":"count_connected_components:Int32-instance-method","html_id":"count_connected_components:Int32-instance-method","name":"count_connected_components","doc":"Returns the number of connected components in `self`.","summary":"<p>Returns the number of connected components in <code>self</code>.</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/cgl/algorithms/components/connected.cr","line_number":49,"url":null},"def":{"name":"count_connected_components","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"each_connected_component.size"}},{"id":"density:Float64-instance-method","html_id":"density:Float64-instance-method","name":"density","doc":"Returns the density of `self`.\n\nSelf loops are counted in the total number of edges so graphs with self\nloops can have density higher than 1.","summary":"<p>Returns the density of <code>self</code>.</p>","abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/cgl/igraph.cr","line_number":331,"url":null},"def":{"name":"density","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"if empty?\n  return 0.0\nend\nn = self.order\nm = self.size\n(2 * m) / (n * (n - 1))\n"}},{"id":"directed?:Bool-instance-method","html_id":"directed?:Bool-instance-method","name":"directed?","doc":"Whether `self` is directed.","summary":"<p>Whether <code>self</code> is directed.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/cgl/igraph.cr","line_number":302,"url":null},"def":{"name":"directed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"false"}},{"id":"each_connected_component(&)-instance-method","html_id":"each_connected_component(&)-instance-method","name":"each_connected_component","doc":"Yields each connected component of `self` as an `Array'.","summary":"<p>Yields each connected component of <code>self</code> as an `Array'.</p>","abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/cgl/algorithms/components/connected.cr","line_number":46,"url":null},"def":{"name":"each_connected_component","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"colors = Hash(V, Color).new(Color::White, self.order)\neach_vertex do |vroot|\n  if colors[vroot].black?\n  else\n    component = [] of V\n    depth_first_search(vroot, colors: colors) do |v|\n      component << v\n    end\n    yield component\n  end\nend\n"}},{"id":"each_connected_component:Iterator(Array(V))-instance-method","html_id":"each_connected_component:Iterator(Array(V))-instance-method","name":"each_connected_component","doc":"Returns an `Iterator` of connected components.","summary":"<p>Returns an <code>Iterator</code> of connected components.</p>","abstract":false,"args":[],"args_string":" : Iterator(Array(V))","args_html":" : Iterator(Array(V))","location":{"filename":"src/cgl/algorithms/components/connected.cr","line_number":46,"url":null},"def":{"name":"each_connected_component","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Array(V))","visibility":"Public","body":"ComponentsIterator(V).new(self)"}},{"id":"each_edge(&:AnyEdge(V)->)-instance-method","html_id":"each_edge(&:AnyEdge(V)->)-instance-method","name":"each_edge","doc":"Yields each edges in the graph.","summary":"<p>Yields each edges in the graph.</p>","abstract":false,"args":[],"args_string":"(& : AnyEdge(V) -> )","args_html":"(& : <a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V) -> )","location":{"filename":"src/cgl/igraph.cr","line_number":306,"url":null},"def":{"name":"each_edge","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(AnyEdge(V) -> )"},"return_type":"","visibility":"Public","body":"visited = Set(AnyEdge(V)).new\neach_vertex do |u|\n  each_adjacent(u) do |v|\n    edge = unchecked_edge(u, v)\n    if !(visited.includes?(edge))\n      visited << edge\n      yield edge\n    end\n  end\nend\n"}},{"id":"each_edge_from(u:V,&:AnyEdge(V)->)-instance-method","html_id":"each_edge_from(u:V,&:AnyEdge(V)->)-instance-method","name":"each_edge_from","doc":"Yields each edge incident to *u* in the graph.","summary":"<p>Yields each edge incident to <em>u</em> in the graph.</p>","abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"}],"args_string":"(u : V, & : AnyEdge(V) -> )","args_html":"(u : V, & : <a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V) -> )","location":{"filename":"src/cgl/igraph.cr","line_number":319,"url":null},"def":{"name":"each_edge_from","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(AnyEdge(V) -> )"},"return_type":"","visibility":"Public","body":"each_adjacent(u) do |v|\n  yield unchecked_edge(u, v)\nend"}},{"id":"in_degree_of(v:V):Int32-instance-method","html_id":"in_degree_of(v:V):Int32-instance-method","name":"in_degree_of","doc":"Returns the incoming degree of the given vertex *v*.\n\nFor undirected graphs, the value equals `#degree_of`.","summary":"<p>Returns the incoming degree of the given vertex <em>v</em>.</p>","abstract":false,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(v : V) : Int32","args_html":"(v : V) : Int32","location":{"filename":"src/cgl/igraph.cr","line_number":327,"url":null},"def":{"name":"in_degree_of","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"degree_of(v)"}},{"id":"out_degree_of(v:V):Int32-instance-method","html_id":"out_degree_of(v:V):Int32-instance-method","name":"out_degree_of","doc":"Returns the outgoing degree of the given vertex *v*.\n\nFor undirected graphs, the value equals `#degree_of`.","summary":"<p>Returns the outgoing degree of the given vertex <em>v</em>.</p>","abstract":false,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(v : V) : Int32","args_html":"(v : V) : Int32","location":{"filename":"src/cgl/igraph.cr","line_number":323,"url":null},"def":{"name":"out_degree_of","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"degree_of(v)"}}],"macros":[],"types":[]},{"html_id":"cgl/CGL/AdjacencyDiGraph","path":"CGL/AdjacencyDiGraph.html","kind":"class","full_name":"CGL::AdjacencyDiGraph(V, W, L)","name":"AdjacencyDiGraph","abstract":true,"superclass":{"html_id":"cgl/CGL/AbstractDiGraph","kind":"class","full_name":"CGL::AbstractDiGraph","name":"AbstractDiGraph"},"ancestors":[{"html_id":"cgl/CGL/AdjacencyHash","kind":"module","full_name":"CGL::AdjacencyHash","name":"AdjacencyHash"},{"html_id":"cgl/CGL/AbstractDiGraph","kind":"class","full_name":"CGL::AbstractDiGraph","name":"AbstractDiGraph"},{"html_id":"cgl/CGL/AnyGraph","kind":"class","full_name":"CGL::AnyGraph","name":"AnyGraph"},{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/representations/adjacency.cr","line_number":248,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"cgl/CGL/AdjacencyHash","kind":"module","full_name":"CGL::AdjacencyHash","name":"AdjacencyHash"}],"extended_modules":[],"subclasses":[{"html_id":"cgl/CGL/DiGraph","kind":"class","full_name":"CGL::DiGraph(V)","name":"DiGraph"},{"html_id":"cgl/CGL/LabeledDiGraph","kind":"class","full_name":"CGL::LabeledDiGraph(V, L)","name":"LabeledDiGraph"},{"html_id":"cgl/CGL/WeightedDiGraph","kind":"class","full_name":"CGL::WeightedDiGraph(V, W)","name":"WeightedDiGraph"},{"html_id":"cgl/CGL/WeightedLabeledDiGraph","kind":"class","full_name":"CGL::WeightedLabeledDiGraph(V, W, L)","name":"WeightedLabeledDiGraph"}],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":"A base class for adjacency list-based *directed* graphs","summary":"<p>A base class for adjacency list-based <em>directed</em> graphs</p>","class_methods":[],"constructors":[{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:W?=nil,&block:->L?)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:W?=nil,&block:->L?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> L?)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> L?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":44,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":4,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = AdjacencyDiGraph(V, W, L).allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:W?=nil,default_label:L?=nil)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:W?=nil,default_label:L?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":57,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":4,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = AdjacencyDiGraph(V, W, L).allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,&block:->L?)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,&block:->L?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> L?)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> L?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":70,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":1,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = AdjacencyDiGraph(V, W, L).allocate\n_.initialize(edges, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,default_label:L?=nil)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,default_label:L?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : W? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : W? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":79,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = AdjacencyDiGraph(V, W, L).allocate\n_.initialize(edges, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"add_edge(u:V,v:V,weight:W=self.default_weight,label:L?=self.default_label)-instance-method","html_id":"add_edge(u:V,v:V,weight:W=self.default_weight,label:L?=self.default_label)-instance-method","name":"add_edge","doc":"Add an edge between vertices *u* and *v*.\n\nThe given vertices are automatically added if they are not already part\nof the graph.\n\nA *weight* and/or a label can be associated to the edge if\nthe concrete class supports it.","summary":"<p>Add an edge between vertices <em>u</em> and <em>v</em>.</p>","abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"},{"name":"weight","doc":null,"default_value":"self.default_weight","external_name":"weight","restriction":"W"},{"name":"label","doc":null,"default_value":"self.default_label","external_name":"label","restriction":"L | ::Nil"}],"args_string":"(u : V, v : V, weight : W = <span class=\"k\">self</span>.default_weight, label : L? = <span class=\"k\">self</span>.default_label)","args_html":"(u : V, v : V, weight : W = <span class=\"k\">self</span>.default_weight, label : L? = <span class=\"k\">self</span>.default_label)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":251,"url":null},"def":{"name":"add_edge","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"},{"name":"weight","doc":null,"default_value":"self.default_weight","external_name":"weight","restriction":"W"},{"name":"label","doc":null,"default_value":"self.default_label","external_name":"label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"adj = @vertices[u]\nif !(adj.has_key?(v))\n  add_vertex(v)\n  @size = @size + 1\n  adj[v] = {weight, label}\nend\n"}},{"id":"each_predecessor(v:V,&:V->)-instance-method","html_id":"each_predecessor(v:V,&:V->)-instance-method","name":"each_predecessor","doc":"Yields each predecessor of *u* in the graph.","summary":"<p>Yields each predecessor of <em>u</em> in the graph.</p>","abstract":false,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(v : V, & : V -> )","args_html":"(v : V, & : V -> )","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":286,"url":null},"def":{"name":"each_predecessor","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(V -> )"},"return_type":"","visibility":"Public","body":"if has_vertex?(v)\n  each_vertex do |u|\n    if @vertices[u].has_key?(v)\n      yield u\n    end\n  end\nend"}},{"id":"in_degree_of(v:V):Int32-instance-method","html_id":"in_degree_of(v:V):Int32-instance-method","name":"in_degree_of","doc":"Returns the incoming degree of the given vertex *v*.\n\nFor undirected graphs, the value equals `#degree_of`.","summary":"<p>Returns the incoming degree of the given vertex <em>v</em>.</p>","abstract":false,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(v : V) : Int32","args_html":"(v : V) : Int32","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":292,"url":null},"def":{"name":"in_degree_of","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"size = 0\nif has_vertex?(v)\n  each_vertex do |u|\n    if @vertices[u].has_key?(v)\n      size = size + 1\n    end\n  end\nend\nsize\n"}},{"id":"out_degree_of(v:V):Int32-instance-method","html_id":"out_degree_of(v:V):Int32-instance-method","name":"out_degree_of","doc":"Returns the outgoing degree of the given vertex *v*.\n\nFor undirected graphs, the value equals `#degree_of`.","summary":"<p>Returns the outgoing degree of the given vertex <em>v</em>.</p>","abstract":false,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(v : V) : Int32","args_html":"(v : V) : Int32","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":300,"url":null},"def":{"name":"out_degree_of","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"if has_vertex?(v)\nelse\n  return 0\nend\n@vertices[v].size\n"}},{"id":"remove_edge(u:V,v:V,&)-instance-method","html_id":"remove_edge(u:V,v:V,&)-instance-method","name":"remove_edge","doc":null,"summary":null,"abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(u : V, v : V, &)","args_html":"(u : V, v : V, &)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":260,"url":null},"def":{"name":"remove_edge","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"if edge = edge?(u, v)\n  @vertices[u].delete(v)\n  @size = @size - 1\n  edge\nelse\n  yield u, v\nend"}},{"id":"remove_vertex(v:V)-instance-method","html_id":"remove_vertex(v:V)-instance-method","name":"remove_vertex","doc":"Remove given vertex *v* from this graph.\nEdges incident to *v* are also removed.\n\nRaises a `GraphError` if vertex is not part of the graph.\n\n```\ng = CGL::Graph(String).new(edges: [{\"a\", \"b\"}, {\"b\", \"c\"}])\ng.size # => 2\ng.remove_vertex(\"b\")\ng.size # => 0\n```","summary":"<p>Remove given vertex <em>v</em> from this graph.</p>","abstract":false,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(v : V)","args_html":"(v : V)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":270,"url":null},"def":{"name":"remove_vertex","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if has_vertex?(v)\n  @size = @size - @vertices[v].size\n  @vertices.delete(v)\n  each_vertex do |u|\n    if @vertices[u].has_key?(v)\n      @vertices[u].delete(v)\n      @size = @size - 1\n    end\n  end\nelse\n  raise(GraphError.new(\"The vertex #{v} is not in the graph.\"))\nend"}}],"macros":[],"types":[]},{"html_id":"cgl/CGL/AdjacencyGraph","path":"CGL/AdjacencyGraph.html","kind":"class","full_name":"CGL::AdjacencyGraph(V, W, L)","name":"AdjacencyGraph","abstract":true,"superclass":{"html_id":"cgl/CGL/AbstractGraph","kind":"class","full_name":"CGL::AbstractGraph","name":"AbstractGraph"},"ancestors":[{"html_id":"cgl/CGL/AdjacencyHash","kind":"module","full_name":"CGL::AdjacencyHash","name":"AdjacencyHash"},{"html_id":"cgl/CGL/AbstractGraph","kind":"class","full_name":"CGL::AbstractGraph","name":"AbstractGraph"},{"html_id":"cgl/CGL/AnyGraph","kind":"class","full_name":"CGL::AnyGraph","name":"AnyGraph"},{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/representations/adjacency.cr","line_number":196,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"cgl/CGL/AdjacencyHash","kind":"module","full_name":"CGL::AdjacencyHash","name":"AdjacencyHash"}],"extended_modules":[],"subclasses":[{"html_id":"cgl/CGL/Graph","kind":"class","full_name":"CGL::Graph(V)","name":"Graph"},{"html_id":"cgl/CGL/LabeledGraph","kind":"class","full_name":"CGL::LabeledGraph(V, L)","name":"LabeledGraph"},{"html_id":"cgl/CGL/WeightedGraph","kind":"class","full_name":"CGL::WeightedGraph(V, W)","name":"WeightedGraph"},{"html_id":"cgl/CGL/WeightedLabeledGraph","kind":"class","full_name":"CGL::WeightedLabeledGraph(V, W, L)","name":"WeightedLabeledGraph"}],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":"A base class for adjacency list-based *undirected* graphs","summary":"<p>A base class for adjacency list-based <em>undirected</em> graphs</p>","class_methods":[],"constructors":[{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:W?=nil,&block:->L?)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:W?=nil,&block:->L?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> L?)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> L?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":44,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":4,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = AdjacencyGraph(V, W, L).allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:W?=nil,default_label:L?=nil)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:W?=nil,default_label:L?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":57,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":4,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = AdjacencyGraph(V, W, L).allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,&block:->L?)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,&block:->L?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> L?)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> L?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":70,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":1,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = AdjacencyGraph(V, W, L).allocate\n_.initialize(edges, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,default_label:L?=nil)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,default_label:L?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : W? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : W? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":79,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = AdjacencyGraph(V, W, L).allocate\n_.initialize(edges, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"add_edge(u:V,v:V,weight:W=self.default_weight,label:L?=self.default_label)-instance-method","html_id":"add_edge(u:V,v:V,weight:W=self.default_weight,label:L?=self.default_label)-instance-method","name":"add_edge","doc":"Add an edge between vertices *u* and *v*.\n\nThe given vertices are automatically added if they are not already part\nof the graph.\n\nA *weight* and/or a label can be associated to the edge if\nthe concrete class supports it.","summary":"<p>Add an edge between vertices <em>u</em> and <em>v</em>.</p>","abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"},{"name":"weight","doc":null,"default_value":"self.default_weight","external_name":"weight","restriction":"W"},{"name":"label","doc":null,"default_value":"self.default_label","external_name":"label","restriction":"L | ::Nil"}],"args_string":"(u : V, v : V, weight : W = <span class=\"k\">self</span>.default_weight, label : L? = <span class=\"k\">self</span>.default_label)","args_html":"(u : V, v : V, weight : W = <span class=\"k\">self</span>.default_weight, label : L? = <span class=\"k\">self</span>.default_label)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":199,"url":null},"def":{"name":"add_edge","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"},{"name":"weight","doc":null,"default_value":"self.default_weight","external_name":"weight","restriction":"W"},{"name":"label","doc":null,"default_value":"self.default_label","external_name":"label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if has_edge?(u, v)\nelse\n  @size = @size + 1\n  @vertices[u][v] = {weight, label}\n  @vertices[v][u] = {weight, label}\nend"}},{"id":"degree_of(v:V):Int32-instance-method","html_id":"degree_of(v:V):Int32-instance-method","name":"degree_of","doc":"Returns the degree of the given vertex *v*.\n\nFor directed graphs, the value equals `#out_degree_of`.\n\nFor undirected graphs, the value is the sum of `#in_degree_of` and\n`#in_degree_of`.","summary":"<p>Returns the degree of the given vertex <em>v</em>.</p>","abstract":false,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(v : V) : Int32","args_html":"(v : V) : Int32","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":228,"url":null},"def":{"name":"degree_of","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"if has_vertex?(v)\nelse\n  return 0\nend\nadj = @vertices[v]\nsize = adj.size\nif adj.has_key?(v)\n  size = size + 1\nend\nsize\n"}},{"id":"remove_edge(u:V,v:V,&)-instance-method","html_id":"remove_edge(u:V,v:V,&)-instance-method","name":"remove_edge","doc":null,"summary":null,"abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(u : V, v : V, &)","args_html":"(u : V, v : V, &)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":207,"url":null},"def":{"name":"remove_edge","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"if edge = edge?(u, v)\n  @vertices[u].delete(v)\n  @vertices[v].delete(u)\n  @size = @size - 1\n  edge\nelse\n  yield u, v\nend"}},{"id":"remove_vertex(v:V)-instance-method","html_id":"remove_vertex(v:V)-instance-method","name":"remove_vertex","doc":"Remove given vertex *v* from this graph.\nEdges incident to *v* are also removed.\n\nRaises a `GraphError` if vertex is not part of the graph.\n\n```\ng = CGL::Graph(String).new(edges: [{\"a\", \"b\"}, {\"b\", \"c\"}])\ng.size # => 2\ng.remove_vertex(\"b\")\ng.size # => 0\n```","summary":"<p>Remove given vertex <em>v</em> from this graph.</p>","abstract":false,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(v : V)","args_html":"(v : V)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":218,"url":null},"def":{"name":"remove_vertex","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if has_vertex?(v)\n  @size = @size - @vertices[v].size\n  each_adjacent(v) do |u|\n    @vertices[u].delete(v)\n  end\n  @vertices.delete(v)\nelse\n  raise(GraphError.new(\"The vertex #{v} is not in the graph.\"))\nend"}}],"macros":[],"types":[]},{"html_id":"cgl/CGL/AdjacencyHash","path":"CGL/AdjacencyHash.html","kind":"module","full_name":"CGL::AdjacencyHash(V, W, L)","name":"AdjacencyHash","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/cgl/representations/adjacency.cr","line_number":7,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"cgl/CGL/AdjacencyDiGraph","kind":"class","full_name":"CGL::AdjacencyDiGraph(V, W, L)","name":"AdjacencyDiGraph"},{"html_id":"cgl/CGL/AdjacencyGraph","kind":"class","full_name":"CGL::AdjacencyGraph(V, W, L)","name":"AdjacencyGraph"}],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":"Reusable adjacency list representation for an `AnyGraph`.\n\nUses a hash table to associate each vertex `V` with a set of adjacent\nvertices. The set is backed by another hash table that can be used to store\narbitrary data of type `L` and a weight of type `W` with each edge.","summary":"<p>Reusable adjacency list representation for an <code><a href=\"../CGL/AnyGraph.html\">AnyGraph</a></code>.</p>","class_methods":[],"constructors":[{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:W?=nil,&block:->L?)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:W?=nil,&block:->L?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> L?)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> L?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":44,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":4,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:W?=nil,default_label:L?=nil)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:W?=nil,default_label:L?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":57,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":4,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,&block:->L?)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,&block:->L?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> L?)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> L?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":70,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":1,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(edges, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,default_label:L?=nil)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,default_label:L?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : W? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : W? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":79,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(edges, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"add_edge(edge:AnyEdge(V))-instance-method","html_id":"add_edge(edge:AnyEdge(V))-instance-method","name":"add_edge","doc":null,"summary":null,"abstract":false,"args":[{"name":"edge","doc":null,"default_value":"","external_name":"edge","restriction":"AnyEdge(V)"}],"args_string":"(edge : AnyEdge(V))","args_html":"(edge : <a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V))","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":88,"url":null},"def":{"name":"add_edge","args":[{"name":"edge","doc":null,"default_value":"","external_name":"edge","restriction":"AnyEdge(V)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"weight = edge.is_a?(Weightable(W)) ? edge.weight : default_weight\nlabel = edge.is_a?(Labelable(L)) ? edge.label : default_label\nadd_edge(edge.u, edge.v, weight, label)\n"}},{"id":"add_vertex(v:V)-instance-method","html_id":"add_vertex(v:V)-instance-method","name":"add_vertex","doc":null,"summary":null,"abstract":false,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(v : V)","args_html":"(v : V)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":120,"url":null},"def":{"name":"add_vertex","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@vertices[v]"}},{"id":"clear-instance-method","html_id":"clear-instance-method","name":"clear","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":114,"url":null},"def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@vertices.clear\n@size = 0\nself\n"}},{"id":"each_adjacent(u:V):Iterator(V)-instance-method","html_id":"each_adjacent(u:V):Iterator(V)-instance-method","name":"each_adjacent","doc":null,"summary":null,"abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"}],"args_string":"(u : V) : Iterator(V)","args_html":"(u : V) : Iterator(V)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":186,"url":null},"def":{"name":"each_adjacent","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(V)","visibility":"Public","body":"if has_vertex?(u)\n  @vertices[u].each_key\nelse\n  raise(GraphError.new(\"vertex #{u} is not part of this graph\"))\nend"}},{"id":"each_adjacent(u:V,&:V->)-instance-method","html_id":"each_adjacent(u:V,&:V->)-instance-method","name":"each_adjacent","doc":null,"summary":null,"abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"}],"args_string":"(u : V, & : V -> )","args_html":"(u : V, & : V -> )","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":180,"url":null},"def":{"name":"each_adjacent","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(V -> )"},"return_type":"","visibility":"Public","body":"if has_vertex?(u)\n  @vertices[u].each_key do |v|\n    yield v\n  end\nend"}},{"id":"each_vertex:Iterator(V)-instance-method","html_id":"each_vertex:Iterator(V)-instance-method","name":"each_vertex","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Iterator(V)","args_html":" : Iterator(V)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":168,"url":null},"def":{"name":"each_vertex","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(V)","visibility":"Public","body":"@vertices.each_key"}},{"id":"each_vertex(&:V->)-instance-method","html_id":"each_vertex(&:V->)-instance-method","name":"each_vertex","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(& : V -> )","args_html":"(& : V -> )","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":164,"url":null},"def":{"name":"each_vertex","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(V -> )"},"return_type":"","visibility":"Public","body":"@vertices.each_key do |v|\n  yield v\nend"}},{"id":"has_edge?(u:V,v:V,weight:W,label:L?):Bool-instance-method","html_id":"has_edge?(u:V,v:V,weight:W,label:L?):Bool-instance-method","name":"has_edge?","doc":null,"summary":null,"abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"W"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"L | ::Nil"}],"args_string":"(u : V, v : V, weight : W, label : L?) : Bool","args_html":"(u : V, v : V, weight : W, label : L?) : Bool","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":132,"url":null},"def":{"name":"has_edge?","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"W"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(has_edge?(u, v)) && ((unsafe_fetch(u, v)) == {weight, label})"}},{"id":"has_edge?(u:V,v:V,weight,label):Bool-instance-method","html_id":"has_edge?(u:V,v:V,weight,label):Bool-instance-method","name":"has_edge?","doc":null,"summary":null,"abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":""}],"args_string":"(u : V, v : V, weight, label) : Bool","args_html":"(u : V, v : V, weight, label) : Bool","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":128,"url":null},"def":{"name":"has_edge?","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"{{ raise(\"#{@type}: Cannot add edge unless weight and label are of types #{W} and #{::Union(L, ::Nil)}, respectively.\") }}"}},{"id":"has_edge?(u:V,v:V):Bool-instance-method","html_id":"has_edge?(u:V,v:V):Bool-instance-method","name":"has_edge?","doc":null,"summary":null,"abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(u : V, v : V) : Bool","args_html":"(u : V, v : V) : Bool","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":124,"url":null},"def":{"name":"has_edge?","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(has_vertex?(u)) && (@vertices[u].has_key?(v))"}},{"id":"has_vertex?(v:V):Bool-instance-method","html_id":"has_vertex?(v:V):Bool-instance-method","name":"has_vertex?","doc":null,"summary":null,"abstract":false,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(v : V) : Bool","args_html":"(v : V) : Bool","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":176,"url":null},"def":{"name":"has_vertex?","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@vertices.has_key?(v)"}},{"id":"label_block:->L?-instance-method","html_id":"label_block:->L?-instance-method","name":"label_block","doc":"The block triggered for default edge labels.","summary":"<p>The block triggered for default edge labels.</p>","abstract":false,"args":[],"args_string":" :  -> L?","args_html":" :  -> L?","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":14,"url":null},"def":{"name":"label_block","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"(-> L | ::Nil)","visibility":"Public","body":"@label_block"}},{"id":"label_of(u:V,v:V):L?-instance-method","html_id":"label_of(u:V,v:V):L?-instance-method","name":"label_of","doc":null,"summary":null,"abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(u : V, v : V) : L?","args_html":"(u : V, v : V) : L?","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":155,"url":null},"def":{"name":"label_of","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"L | ::Nil","visibility":"Public","body":"if has_edge?(u, v)\nelse\n  raise(EdgeError.new(\"No edge between #{u} and #{v}\"))\nend\n(unsafe_fetch(u, v)).last\n"}},{"id":"label_of?(u:V,v:V):L?-instance-method","html_id":"label_of?(u:V,v:V):L?-instance-method","name":"label_of?","doc":null,"summary":null,"abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(u : V, v : V) : L?","args_html":"(u : V, v : V) : L?","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":145,"url":null},"def":{"name":"label_of?","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"L | ::Nil","visibility":"Public","body":"if has_edge?(u, v)\nelse\n  return nil\nend\n(unsafe_fetch(u, v)).last\n"}},{"id":"labeled?:Bool-instance-method","html_id":"labeled?:Bool-instance-method","name":"labeled?","doc":"Whether edges are labeled.","summary":"<p>Whether edges are labeled.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":110,"url":null},"def":{"name":"labeled?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"{{ L != Nil }}"}},{"id":"order:Int32-instance-method","html_id":"order:Int32-instance-method","name":"order","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":160,"url":null},"def":{"name":"order","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@vertices.size"}},{"id":"size:Int32-instance-method","html_id":"size:Int32-instance-method","name":"size","doc":"The number of edges in `self`.","summary":"<p>The number of edges in <code>self</code>.</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":11,"url":null},"def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@size"}},{"id":"vertices-instance-method","html_id":"vertices-instance-method","name":"vertices","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":172,"url":null},"def":{"name":"vertices","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@vertices.keys"}},{"id":"weight_of(u:V,v:V):W-instance-method","html_id":"weight_of(u:V,v:V):W-instance-method","name":"weight_of","doc":null,"summary":null,"abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(u : V, v : V) : W","args_html":"(u : V, v : V) : W","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":150,"url":null},"def":{"name":"weight_of","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"W","visibility":"Public","body":"if has_edge?(u, v)\nelse\n  raise(EdgeError.new(\"No edge between #{u} and #{v}\"))\nend\n(unsafe_fetch(u, v)).first\n"}},{"id":"weight_of?(u:V,v:V):W?-instance-method","html_id":"weight_of?(u:V,v:V):W?-instance-method","name":"weight_of?","doc":null,"summary":null,"abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(u : V, v : V) : W?","args_html":"(u : V, v : V) : W?","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":140,"url":null},"def":{"name":"weight_of?","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"W | ::Nil","visibility":"Public","body":"if has_edge?(u, v)\nelse\n  return nil\nend\n(unsafe_fetch(u, v)).first\n"}},{"id":"weighted?:Bool-instance-method","html_id":"weighted?:Bool-instance-method","name":"weighted?","doc":"Whether edges are weighted.","summary":"<p>Whether edges are weighted.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":105,"url":null},"def":{"name":"weighted?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"{{ W != Nil }}"}}],"macros":[],"types":[]},{"html_id":"cgl/CGL/AnyEdge","path":"CGL/AnyEdge.html","kind":"module","full_name":"CGL::AnyEdge(V)","name":"AnyEdge","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/cgl/edges.cr","line_number":2,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"cgl/CGL/Directed","kind":"module","full_name":"CGL::Directed(V)","name":"Directed"},{"html_id":"cgl/CGL/Undirected","kind":"module","full_name":"CGL::Undirected(V)","name":"Undirected"}],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(u:V,v:V)-class-method","html_id":"new(u:V,v:V)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(u : V, v : V)","args_html":"(u : V, v : V)","location":{"filename":"src/cgl/edges.cr","line_number":6,"url":null},"def":{"name":"new","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(u, v)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/edges.cr","line_number":13,"url":null},"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.new(@u.clone, @v.clone)"}},{"id":"to_tuple-instance-method","html_id":"to_tuple-instance-method","name":"to_tuple","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/edges.cr","line_number":9,"url":null},"def":{"name":"to_tuple","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{@u, @v}"}},{"id":"u:V-instance-method","html_id":"u:V-instance-method","name":"u","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : V","args_html":" : V","location":{"filename":"src/cgl/edges.cr","line_number":3,"url":null},"def":{"name":"u","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"V","visibility":"Public","body":"@u"}},{"id":"u=(u:V)-instance-method","html_id":"u=(u:V)-instance-method","name":"u=","doc":null,"summary":null,"abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"}],"args_string":"(u : V)","args_html":"(u : V)","location":{"filename":"src/cgl/edges.cr","line_number":3,"url":null},"def":{"name":"u=","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@u = u"}},{"id":"v:V-instance-method","html_id":"v:V-instance-method","name":"v","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : V","args_html":" : V","location":{"filename":"src/cgl/edges.cr","line_number":4,"url":null},"def":{"name":"v","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"V","visibility":"Public","body":"@v"}},{"id":"v=(v:V)-instance-method","html_id":"v=(v:V)-instance-method","name":"v=","doc":null,"summary":null,"abstract":false,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(v : V)","args_html":"(v : V)","location":{"filename":"src/cgl/edges.cr","line_number":4,"url":null},"def":{"name":"v=","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@v = v"}}],"macros":[],"types":[]},{"html_id":"cgl/CGL/AnyGraph","path":"CGL/AnyGraph.html","kind":"class","full_name":"CGL::AnyGraph(V)","name":"AnyGraph","abstract":true,"superclass":{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/algorithms/paths/shortest.cr","line_number":2,"url":null},{"filename":"src/cgl/algorithms/paths/simple.cr","line_number":2,"url":null},{"filename":"src/cgl/format/dot.cr","line_number":33,"url":null},{"filename":"src/cgl/igraph.cr","line_number":2,"url":null},{"filename":"src/cgl/traversal/breadth_first_search.cr","line_number":12,"url":null},{"filename":"src/cgl/traversal/depth_first_search.cr","line_number":12,"url":null},{"filename":"src/cgl/traversal/visitor.cr","line_number":21,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"cgl/CGL/AbstractDiGraph","kind":"class","full_name":"CGL::AbstractDiGraph(V)","name":"AbstractDiGraph"},{"html_id":"cgl/CGL/AbstractGraph","kind":"class","full_name":"CGL::AbstractGraph(V)","name":"AbstractGraph"}],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"==(other:self)-instance-method","html_id":"==(other:self)-instance-method","name":"==","doc":"Whether `self` is equal to *other*.","summary":"<p>Whether <code>self</code> is equal to <em>other</em>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"args_string":"(other : <span class=\"k\">self</span>)","args_html":"(other : <span class=\"k\">self</span>)","location":{"filename":"src/cgl/igraph.cr","line_number":264,"url":null},"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (size != other.size) || (order != other.order)\n  return false\nend\neach_vertex do |v|\n  if other.has_vertex?(v)\n  else\n    return false\n  end\n  each_edge_from(v) do |e|\n    if other.has_edge?(e)\n    else\n      return false\n    end\n  end\nend\ntrue\n"}},{"id":"==(other)-instance-method","html_id":"==(other)-instance-method","name":"==","doc":"Returns `false` (other can only be a `Value` here).","summary":"<p>Returns <code>false</code> (other can only be a <code>Value</code> here).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/cgl/igraph.cr","line_number":275,"url":null},"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"false"}},{"id":"accept(visitor:Visitor(V))-instance-method","html_id":"accept(visitor:Visitor(V))-instance-method","name":"accept","doc":null,"summary":null,"abstract":false,"args":[{"name":"visitor","doc":null,"default_value":"","external_name":"visitor","restriction":"Visitor(V)"}],"args_string":"(visitor : Visitor(V))","args_html":"(visitor : <a href=\"../CGL/Visitor.html\">Visitor</a>(V))","location":{"filename":"src/cgl/traversal/visitor.cr","line_number":22,"url":null},"def":{"name":"accept","args":[{"name":"visitor","doc":null,"default_value":"","external_name":"visitor","restriction":"Visitor(V)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if visitor.visit_vertices?\n  each_vertex do |v|\n    visitor.visit(v)\n  end\nend\nif visitor.visit_edges?\n  each_edge do |edge|\n    visitor.visit(edge)\n  end\nend\n"}},{"id":"add_edge(u:V,v:V)-instance-method","html_id":"add_edge(u:V,v:V)-instance-method","name":"add_edge","doc":"Add an edge between vertices *u* and *v*.\n\nThe given vertices are automatically added if they are not already part\nof the graph.\n\nA *weight* and/or a label can be associated to the edge if\nthe concrete class supports it.","summary":"<p>Add an edge between vertices <em>u</em> and <em>v</em>.</p>","abstract":true,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(u : V, v : V)","args_html":"(u : V, v : V)","location":{"filename":"src/cgl/igraph.cr","line_number":92,"url":null},"def":{"name":"add_edge","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"add_edge(edge:AnyEdge(V))-instance-method","html_id":"add_edge(edge:AnyEdge(V))-instance-method","name":"add_edge","doc":"Add the given *edge* to the graph.\n\nSee `#add_edge(u : V, v : V, weight, label)`","summary":"<p>Add the given <em>edge</em> to the graph.</p>","abstract":true,"args":[{"name":"edge","doc":null,"default_value":"","external_name":"edge","restriction":"AnyEdge(V)"}],"args_string":"(edge : AnyEdge(V))","args_html":"(edge : <a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V))","location":{"filename":"src/cgl/igraph.cr","line_number":97,"url":null},"def":{"name":"add_edge","args":[{"name":"edge","doc":null,"default_value":"","external_name":"edge","restriction":"AnyEdge(V)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"add_vertex(v:V)-instance-method","html_id":"add_vertex(v:V)-instance-method","name":"add_vertex","doc":"Add a single vertex (a.k.a. node) to this graph.\n\n```\ng = CGL::Graph(String).new\ng.add_vertex(\"Hello\")\n```","summary":"<p>Add a single vertex (a.k.a.</p>","abstract":true,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(v : V)","args_html":"(v : V)","location":{"filename":"src/cgl/igraph.cr","line_number":70,"url":null},"def":{"name":"add_vertex","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"breadth_first_search(fromvertex:V):Iterator(V)-instance-method","html_id":"breadth_first_search(fromvertex:V):Iterator(V)-instance-method","name":"breadth_first_search","doc":"Returns an iterator over vertices from the given source *v* in a\n**breadth**-first search (DFS).","summary":"<p>Returns an iterator over vertices from the given source <em>v</em> in a <strong>breadth</strong>-first search (DFS).</p>","abstract":false,"args":[{"name":"vertex","doc":null,"default_value":"","external_name":"from","restriction":"V"}],"args_string":"(from vertex : V) : Iterator(V)","args_html":"(from vertex : V) : Iterator(V)","location":{"filename":"src/cgl/traversal/breadth_first_search.cr","line_number":15,"url":null},"def":{"name":"breadth_first_search","args":[{"name":"vertex","doc":null,"default_value":"","external_name":"from","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(V)","visibility":"Public","body":"BFSIterator(V).new(self, vertex)"}},{"id":"breadth_first_search(fromvertex:V,&)-instance-method","html_id":"breadth_first_search(fromvertex:V,&)-instance-method","name":"breadth_first_search","doc":"Yields vertices from the given source *v* in a\n**breadth**-first search (DFS).","summary":"<p>Yields vertices from the given source <em>v</em> in a <strong>breadth</strong>-first search (DFS).</p>","abstract":false,"args":[{"name":"vertex","doc":null,"default_value":"","external_name":"from","restriction":"V"}],"args_string":"(from vertex : V, &)","args_html":"(from vertex : V, &)","location":{"filename":"src/cgl/traversal/breadth_first_search.cr","line_number":21,"url":null},"def":{"name":"breadth_first_search","args":[{"name":"vertex","doc":null,"default_value":"","external_name":"from","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"queue = Deque(V) {vertex}\nvisited = Set(V) {vertex}\nwhile (u = queue.shift?)\n  self.each_adjacent(u) do |v|\n    if visited.includes?(v)\n    else\n      visited.add(v)\n      queue.push(v)\n    end\n  end\n  yield u\nend\n"}},{"id":"clear-instance-method","html_id":"clear-instance-method","name":"clear","doc":"Empties an `AnyGraph` and returns it.","summary":"<p>Empties an <code><a href=\"../CGL/AnyGraph.html\">AnyGraph</a></code> and returns it.</p>","abstract":true,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/igraph.cr","line_number":210,"url":null},"def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a deep copy of `self`.\n\nSimilar to `#dup`, but duplicates the nodes and edges attributes as well.","summary":"<p>Returns a deep copy of <code>self</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/igraph.cr","line_number":257,"url":null},"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"graph = ({{ @type }}).new(default_weight: self.default_weight, &self.label_block)\neach_edge do |e|\n  graph.add_edge(e.clone)\nend\ngraph\n"}},{"id":"count_simple_paths(source:V,target:V)-instance-method","html_id":"count_simple_paths(source:V,target:V)-instance-method","name":"count_simple_paths","doc":"Count all simple paths between the two given vertices,\nwhere a simple path is a path with no repeated nodes.","summary":"<p>Count all simple paths between the two given vertices, where a simple path is a path with no repeated nodes.</p>","abstract":false,"args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":"V"},{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":"V"}],"args_string":"(source : V, target : V)","args_html":"(source : V, target : V)","location":{"filename":"src/cgl/algorithms/paths/simple.cr","line_number":5,"url":null},"def":{"name":"count_simple_paths","args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":"V"},{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"count = 0\nqueue = Deque(V) {source}\nwhile (u = queue.shift?)\n  if u == target\n    count = count + 1\n  end\n  self.each_adjacent(u) do |v|\n    queue.push(v)\n  end\nend\ncount\n"}},{"id":"degree_of(v:V):Int32-instance-method","html_id":"degree_of(v:V):Int32-instance-method","name":"degree_of","doc":"Returns the degree of the given vertex *v*.\n\nFor directed graphs, the value equals `#out_degree_of`.\n\nFor undirected graphs, the value is the sum of `#in_degree_of` and\n`#in_degree_of`.","summary":"<p>Returns the degree of the given vertex <em>v</em>.</p>","abstract":true,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(v : V) : Int32","args_html":"(v : V) : Int32","location":{"filename":"src/cgl/igraph.cr","line_number":197,"url":null},"def":{"name":"degree_of","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":""}},{"id":"density:Float64-instance-method","html_id":"density:Float64-instance-method","name":"density","doc":"Returns the density of `self`.\n\nSelf loops are counted in the total number of edges so graphs with self\nloops can have density higher than 1.","summary":"<p>Returns the density of <code>self</code>.</p>","abstract":true,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/cgl/igraph.cr","line_number":298,"url":null},"def":{"name":"density","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":""}},{"id":"depth_first_search(fromvertex:V):Iterator(V)-instance-method","html_id":"depth_first_search(fromvertex:V):Iterator(V)-instance-method","name":"depth_first_search","doc":"Returns an iterator over vertices from the given source *v* in a\n**depth**-first search (DFS).","summary":"<p>Returns an iterator over vertices from the given source <em>v</em> in a <strong>depth</strong>-first search (DFS).</p>","abstract":false,"args":[{"name":"vertex","doc":null,"default_value":"","external_name":"from","restriction":"V"}],"args_string":"(from vertex : V) : Iterator(V)","args_html":"(from vertex : V) : Iterator(V)","location":{"filename":"src/cgl/traversal/depth_first_search.cr","line_number":15,"url":null},"def":{"name":"depth_first_search","args":[{"name":"vertex","doc":null,"default_value":"","external_name":"from","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(V)","visibility":"Public","body":"DFSIterator(V).new(self, vertex)"}},{"id":"depth_first_search(fromvertex:V,&)-instance-method","html_id":"depth_first_search(fromvertex:V,&)-instance-method","name":"depth_first_search","doc":"Yields vertices from the given source *v* in a\n**depth**-first search (DFS).","summary":"<p>Yields vertices from the given source <em>v</em> in a <strong>depth</strong>-first search (DFS).</p>","abstract":false,"args":[{"name":"vertex","doc":null,"default_value":"","external_name":"from","restriction":"V"}],"args_string":"(from vertex : V, &)","args_html":"(from vertex : V, &)","location":{"filename":"src/cgl/traversal/depth_first_search.cr","line_number":21,"url":null},"def":{"name":"depth_first_search","args":[{"name":"vertex","doc":null,"default_value":"","external_name":"from","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"colors = (Hash(V, Color).new(Color::White)).tap do |h|\n  h[vertex] = Color::Gray\nend\ndepth_first_search(vertex, colors: colors) do |v|\n  yield v\nend\n"}},{"id":"depth_first_search(vertex:V,*,colors:Hash(V,Color),&)-instance-method","html_id":"depth_first_search(vertex:V,*,colors:Hash(V,Color),&)-instance-method","name":"depth_first_search","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertex","doc":null,"default_value":"","external_name":"vertex","restriction":"V"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"colors","doc":null,"default_value":"","external_name":"colors","restriction":"Hash(V, Color)"}],"args_string":"(vertex : V, *, colors : Hash(V, Color), &)","args_html":"(vertex : V, *, colors : Hash(V, <a href=\"../CGL/Color.html\">Color</a>), &)","location":{"filename":"src/cgl/traversal/depth_first_search.cr","line_number":28,"url":null},"def":{"name":"depth_first_search","args":[{"name":"vertex","doc":null,"default_value":"","external_name":"vertex","restriction":"V"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"colors","doc":null,"default_value":"","external_name":"colors","restriction":"Hash(V, Color)"}],"double_splat":null,"splat_index":1,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"stack = Deque(V).new\nif colors[vertex].black?\nelse\n  stack.push(vertex)\nend\nwhile (u = stack.pop?)\n  self.each_adjacent(u) do |v|\n    if colors[v].white?\n      colors[v] = Color::Gray\n      stack.push(v)\n    end\n  end\n  colors[u] = Color::Black\n  yield u\nend\n"}},{"id":"depth_first_search(&)-instance-method","html_id":"depth_first_search(&)-instance-method","name":"depth_first_search","doc":"Yields all vertices of `self`, which are traversed following a\ndepth-first search (DFS) on the whole graph.","summary":"<p>Yields all vertices of <code>self</code>, which are traversed following a depth-first search (DFS) on the whole graph.</p>","abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/cgl/traversal/depth_first_search.cr","line_number":46,"url":null},"def":{"name":"depth_first_search","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"colors = Hash(V, Color).new(Color::White, self.order)\neach_vertex do |root|\n  depth_first_search(root, colors: colors) do |v|\n    yield v\n  end\nend\n"}},{"id":"depth_first_search:Iterator(V)-instance-method","html_id":"depth_first_search:Iterator(V)-instance-method","name":"depth_first_search","doc":"Returns an iterator over all vertices of `self`, which are traversed\nfollowing a depth-first search (DFS) on the whole graph.","summary":"<p>Returns an iterator over all vertices of <code>self</code>, which are traversed following a depth-first search (DFS) on the whole graph.</p>","abstract":false,"args":[],"args_string":" : Iterator(V)","args_html":" : Iterator(V)","location":{"filename":"src/cgl/traversal/depth_first_search.cr","line_number":55,"url":null},"def":{"name":"depth_first_search","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(V)","visibility":"Public","body":"colors = Hash(V, Color).new(Color::White, self.order)\niterators = self.each_vertex.map do |vroot|\n  DFSIterator(V).new(self, vroot, colors: colors)\nend\nIterator(V).chain(iterators)\n"}},{"id":"directed?:Bool-instance-method","html_id":"directed?:Bool-instance-method","name":"directed?","doc":"Whether `self` is directed.","summary":"<p>Whether <code>self</code> is directed.</p>","abstract":true,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/cgl/igraph.cr","line_number":213,"url":null},"def":{"name":"directed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":""}},{"id":"dup-instance-method","html_id":"dup-instance-method","name":"dup","doc":"Returns a shallow copy of `self`.\n\nThe internal data structures are copied, not","summary":"<p>Returns a shallow copy of <code>self</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/igraph.cr","line_number":250,"url":null},"def":{"name":"dup","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"({{ @type }}).new(self.each_edge, default_weight: self.default_weight, &self.label_block)"}},{"id":"each_adjacent(u:V):Iterator(V)-instance-method","html_id":"each_adjacent(u:V):Iterator(V)-instance-method","name":"each_adjacent","doc":"Returns an iterator over each vertex adjacent to *u* in the graph.","summary":"<p>Returns an iterator over each vertex adjacent to <em>u</em> in the graph.</p>","abstract":true,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"}],"args_string":"(u : V) : Iterator(V)","args_html":"(u : V) : Iterator(V)","location":{"filename":"src/cgl/igraph.cr","line_number":39,"url":null},"def":{"name":"each_adjacent","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(V)","visibility":"Public","body":""}},{"id":"each_adjacent(u:V,&:V->)-instance-method","html_id":"each_adjacent(u:V,&:V->)-instance-method","name":"each_adjacent","doc":"Yields each vertex adjacent to *u* in the graph.\n\n```\ng = Graph(String).new(edges: [{\"b\", \"a\"}, {\"a\", \"c\"}])\ng.each_adjacent(\"a\") do |v|\n  puts v\nend\n```\nOutput:\n```\nb\nc\n```\n\nFor directed graphs, adjacent vertices are found following outgoing\nedges.\n\n```\ng = DiGraph(String).new(edges: [{\"b\", \"a\"}, {\"a\", \"c\"}])\ng.each_adjacent(\"a\") do |v|\n  puts v\nend\n```\nOutput:\n```\nc\n```","summary":"<p>Yields each vertex adjacent to <em>u</em> in the graph.</p>","abstract":true,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"}],"args_string":"(u : V, & : V -> )","args_html":"(u : V, & : V -> )","location":{"filename":"src/cgl/igraph.cr","line_number":36,"url":null},"def":{"name":"each_adjacent","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(V -> )"},"return_type":"","visibility":"Public","body":""}},{"id":"each_edge:Iterator(AnyEdge(V))-instance-method","html_id":"each_edge:Iterator(AnyEdge(V))-instance-method","name":"each_edge","doc":"Returns an iterator over each edge in the graph.","summary":"<p>Returns an iterator over each edge in the graph.</p>","abstract":false,"args":[],"args_string":" : Iterator(AnyEdge(V))","args_html":" : Iterator(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V))","location":{"filename":"src/cgl/igraph.cr","line_number":45,"url":null},"def":{"name":"each_edge","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(AnyEdge(V))","visibility":"Public","body":"EdgeIterator(V).new(self)"}},{"id":"each_edge(&:AnyEdge(V)->)-instance-method","html_id":"each_edge(&:AnyEdge(V)->)-instance-method","name":"each_edge","doc":"Yields each edges in the graph.","summary":"<p>Yields each edges in the graph.</p>","abstract":true,"args":[],"args_string":"(& : AnyEdge(V) -> )","args_html":"(& : <a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V) -> )","location":{"filename":"src/cgl/igraph.cr","line_number":42,"url":null},"def":{"name":"each_edge","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(AnyEdge(V) -> )"},"return_type":"","visibility":"Public","body":""}},{"id":"each_edge_from(u:V,&:AnyEdge(V)->)-instance-method","html_id":"each_edge_from(u:V,&:AnyEdge(V)->)-instance-method","name":"each_edge_from","doc":"Yields each edge incident to *u* in the graph.","summary":"<p>Yields each edge incident to <em>u</em> in the graph.</p>","abstract":true,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"}],"args_string":"(u : V, & : AnyEdge(V) -> )","args_html":"(u : V, & : <a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V) -> )","location":{"filename":"src/cgl/igraph.cr","line_number":50,"url":null},"def":{"name":"each_edge_from","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(AnyEdge(V) -> )"},"return_type":"","visibility":"Public","body":""}},{"id":"each_vertex(&:V->)-instance-method","html_id":"each_vertex(&:V->)-instance-method","name":"each_vertex","doc":"Yields each vertex of the graph.","summary":"<p>Yields each vertex of the graph.</p>","abstract":true,"args":[],"args_string":"(& : V -> )","args_html":"(& : V -> )","location":{"filename":"src/cgl/igraph.cr","line_number":4,"url":null},"def":{"name":"each_vertex","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(V -> )"},"return_type":"","visibility":"Public","body":""}},{"id":"each_vertex:Iterator(V)-instance-method","html_id":"each_vertex:Iterator(V)-instance-method","name":"each_vertex","doc":"Returns an iterator over each vertex of the graph.","summary":"<p>Returns an iterator over each vertex of the graph.</p>","abstract":true,"args":[],"args_string":" : Iterator(V)","args_html":" : Iterator(V)","location":{"filename":"src/cgl/igraph.cr","line_number":7,"url":null},"def":{"name":"each_vertex","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(V)","visibility":"Public","body":""}},{"id":"edge(u:V,v:V)-instance-method","html_id":"edge(u:V,v:V)-instance-method","name":"edge","doc":"Returns an edge data structure between *u* and *v* if present in the\ngraph, otherwise raises an `EdgeError`.","summary":"<p>Returns an edge data structure between <em>u</em> and <em>v</em> if present in the graph, otherwise raises an <code><a href=\"../CGL/EdgeError.html\">EdgeError</a></code>.</p>","abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(u : V, v : V)","args_html":"(u : V, v : V)","location":{"filename":"src/cgl/igraph.cr","line_number":158,"url":null},"def":{"name":"edge","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"edge(u, v) do\n  raise(EdgeError.new(\"No edge between #{u} and #{v} found\"))\nend"}},{"id":"edge(u:V,v:V,&)-instance-method","html_id":"edge(u:V,v:V,&)-instance-method","name":"edge","doc":"Returns an edge data structure between *u* and *v* if present in the\ngraph, otherwise returns the value of the given block.","summary":"<p>Returns an edge data structure between <em>u</em> and <em>v</em> if present in the graph, otherwise returns the value of the given block.</p>","abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(u : V, v : V, &)","args_html":"(u : V, v : V, &)","location":{"filename":"src/cgl/igraph.cr","line_number":120,"url":null},"def":{"name":"edge","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"if has_edge?(u, v)\n  unchecked_edge(u, v)\nelse\n  yield\nend"}},{"id":"edge?(u:V,v:V)-instance-method","html_id":"edge?(u:V,v:V)-instance-method","name":"edge?","doc":"Returns an edge data structure between *u* and *v* if present in the\ngraph, otherwise returns `nil`.","summary":"<p>Returns an edge data structure between <em>u</em> and <em>v</em> if present in the graph, otherwise returns <code>nil</code>.</p>","abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(u : V, v : V)","args_html":"(u : V, v : V)","location":{"filename":"src/cgl/igraph.cr","line_number":152,"url":null},"def":{"name":"edge?","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"edge(u, v) do\n  nil\nend"}},{"id":"edges:Array(AnyEdge(V))-instance-method","html_id":"edges:Array(AnyEdge(V))-instance-method","name":"edges","doc":"Returns an array of edges belonging to this graph.","summary":"<p>Returns an array of edges belonging to this graph.</p>","abstract":false,"args":[],"args_string":" : Array(AnyEdge(V))","args_html":" : Array(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V))","location":{"filename":"src/cgl/igraph.cr","line_number":53,"url":null},"def":{"name":"edges","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(AnyEdge(V))","visibility":"Public","body":"Array(AnyEdge(V)).new.tap do |ary|\n  self.each_edge do |e|\n    ary << e\n  end\nend"}},{"id":"empty?:Bool-instance-method","html_id":"empty?:Bool-instance-method","name":"empty?","doc":"Whether the graph is empty.","summary":"<p>Whether the graph is empty.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/cgl/igraph.cr","line_number":114,"url":null},"def":{"name":"empty?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self.size == 0"}},{"id":"has_edge?(edge:Labelable):Bool-instance-method","html_id":"has_edge?(edge:Labelable):Bool-instance-method","name":"has_edge?","doc":"Whether the given edge is part of the graph.","summary":"<p>Whether the given edge is part of the graph.</p>","abstract":false,"args":[{"name":"edge","doc":null,"default_value":"","external_name":"edge","restriction":"Labelable"}],"args_string":"(edge : Labelable) : Bool","args_html":"(edge : <a href=\"../CGL/Labelable.html\">Labelable</a>) : Bool","location":{"filename":"src/cgl/igraph.cr","line_number":177,"url":null},"def":{"name":"has_edge?","args":[{"name":"edge","doc":null,"default_value":"","external_name":"edge","restriction":"Labelable"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"has_edge?(edge.u, edge.v, self.default_weight, edge.label)"}},{"id":"has_edge?(u:V,v:V,weight,label):Bool-instance-method","html_id":"has_edge?(u:V,v:V,weight,label):Bool-instance-method","name":"has_edge?","doc":"Whether the edge between *u* and *v* with the given attributes\nis part of the graph.","summary":"<p>Whether the edge between <em>u</em> and <em>v</em> with the given attributes is part of the graph.</p>","abstract":true,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":""}],"args_string":"(u : V, v : V, weight, label) : Bool","args_html":"(u : V, v : V, weight, label) : Bool","location":{"filename":"src/cgl/igraph.cr","line_number":171,"url":null},"def":{"name":"has_edge?","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":""}},{"id":"has_edge?(u:V,v:V):Bool-instance-method","html_id":"has_edge?(u:V,v:V):Bool-instance-method","name":"has_edge?","doc":"Whether the edge between *u* and *v* is part of the graph.","summary":"<p>Whether the edge between <em>u</em> and <em>v</em> is part of the graph.</p>","abstract":true,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(u : V, v : V) : Bool","args_html":"(u : V, v : V) : Bool","location":{"filename":"src/cgl/igraph.cr","line_number":174,"url":null},"def":{"name":"has_edge?","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":""}},{"id":"has_edge?(edge:Weightable):Bool-instance-method","html_id":"has_edge?(edge:Weightable):Bool-instance-method","name":"has_edge?","doc":"Whether the given edge is part of the graph.","summary":"<p>Whether the given edge is part of the graph.</p>","abstract":false,"args":[{"name":"edge","doc":null,"default_value":"","external_name":"edge","restriction":"Weightable"}],"args_string":"(edge : Weightable) : Bool","args_html":"(edge : <a href=\"../CGL/Weightable.html\">Weightable</a>) : Bool","location":{"filename":"src/cgl/igraph.cr","line_number":182,"url":null},"def":{"name":"has_edge?","args":[{"name":"edge","doc":null,"default_value":"","external_name":"edge","restriction":"Weightable"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"has_edge?(edge.u, edge.v, edge.weight, self.default_label)"}},{"id":"has_edge?(edge:AnyEdge(V)):Bool-instance-method","html_id":"has_edge?(edge:AnyEdge(V)):Bool-instance-method","name":"has_edge?","doc":"Whether the given edge is part of the graph.","summary":"<p>Whether the given edge is part of the graph.</p>","abstract":false,"args":[{"name":"edge","doc":null,"default_value":"","external_name":"edge","restriction":"AnyEdge(V)"}],"args_string":"(edge : AnyEdge(V)) : Bool","args_html":"(edge : <a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)) : Bool","location":{"filename":"src/cgl/igraph.cr","line_number":187,"url":null},"def":{"name":"has_edge?","args":[{"name":"edge","doc":null,"default_value":"","external_name":"edge","restriction":"AnyEdge(V)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"has_edge?(edge.u, edge.v)"}},{"id":"has_vertex?(v:V):Bool-instance-method","html_id":"has_vertex?(v:V):Bool-instance-method","name":"has_vertex?","doc":"Whether the given vertex *v* is part of the graph.","summary":"<p>Whether the given vertex <em>v</em> is part of the graph.</p>","abstract":true,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(v : V) : Bool","args_html":"(v : V) : Bool","location":{"filename":"src/cgl/igraph.cr","line_number":167,"url":null},"def":{"name":"has_vertex?","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":""}},{"id":"hash(hasher)-instance-method","html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","location":{"filename":"src/cgl/igraph.cr","line_number":280,"url":null},"def":{"name":"hash","args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"result = hasher.result\neach_edge do |edge|\n  copy = hasher\n  copy = edge.hash(copy)\n  result = result &+ copy.result\nend\nresult.hash(hasher)\n"}},{"id":"in_degree_of(v:V):Int32-instance-method","html_id":"in_degree_of(v:V):Int32-instance-method","name":"in_degree_of","doc":"Returns the incoming degree of the given vertex *v*.\n\nFor undirected graphs, the value equals `#degree_of`.","summary":"<p>Returns the incoming degree of the given vertex <em>v</em>.</p>","abstract":true,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(v : V) : Int32","args_html":"(v : V) : Int32","location":{"filename":"src/cgl/igraph.cr","line_number":202,"url":null},"def":{"name":"in_degree_of","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":""}},{"id":"label_of(u:V,v:V)-instance-method","html_id":"label_of(u:V,v:V)-instance-method","name":"label_of","doc":"Returns the label associated with the given edge if it exists, raises\n`EdgeError` otherwise","summary":"<p>Returns the label associated with the given edge if it exists, raises <code><a href=\"../CGL/EdgeError.html\">EdgeError</a></code> otherwise</p>","abstract":true,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(u : V, v : V)","args_html":"(u : V, v : V)","location":{"filename":"src/cgl/igraph.cr","line_number":140,"url":null},"def":{"name":"label_of","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"label_of?(u:V,v:V)-instance-method","html_id":"label_of?(u:V,v:V)-instance-method","name":"label_of?","doc":"Returns the label associated with the given edge if it exists, otherwise\nreturns `nil`.","summary":"<p>Returns the label associated with the given edge if it exists, otherwise returns <code>nil</code>.</p>","abstract":true,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(u : V, v : V)","args_html":"(u : V, v : V)","location":{"filename":"src/cgl/igraph.cr","line_number":148,"url":null},"def":{"name":"label_of?","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"labeled?:Bool-instance-method","html_id":"labeled?:Bool-instance-method","name":"labeled?","doc":"Whether edges are labeled.","summary":"<p>Whether edges are labeled.</p>","abstract":true,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/cgl/igraph.cr","line_number":132,"url":null},"def":{"name":"labeled?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":""}},{"id":"order:Int32-instance-method","html_id":"order:Int32-instance-method","name":"order","doc":"Returns the number of vertices in `self`.","summary":"<p>Returns the number of vertices in <code>self</code>.</p>","abstract":true,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/cgl/igraph.cr","line_number":111,"url":null},"def":{"name":"order","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":""}},{"id":"out_degree_of(v:V):Int32-instance-method","html_id":"out_degree_of(v:V):Int32-instance-method","name":"out_degree_of","doc":"Returns the outgoing degree of the given vertex *v*.\n\nFor undirected graphs, the value equals `#degree_of`.","summary":"<p>Returns the outgoing degree of the given vertex <em>v</em>.</p>","abstract":true,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(v : V) : Int32","args_html":"(v : V) : Int32","location":{"filename":"src/cgl/igraph.cr","line_number":207,"url":null},"def":{"name":"out_degree_of","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":""}},{"id":"remove_edge(u:V,v:V)-instance-method","html_id":"remove_edge(u:V,v:V)-instance-method","name":"remove_edge","doc":"Deletes the given edge and returns it, otherwise returns `nil`.","summary":"<p>Deletes the given edge and returns it, otherwise returns <code>nil</code>.</p>","abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(u : V, v : V)","args_html":"(u : V, v : V)","location":{"filename":"src/cgl/igraph.cr","line_number":103,"url":null},"def":{"name":"remove_edge","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"remove_edge(u, v) do\n  nil\nend"}},{"id":"remove_vertex(v:V)-instance-method","html_id":"remove_vertex(v:V)-instance-method","name":"remove_vertex","doc":"Remove given vertex *v* from this graph.\nEdges incident to *v* are also removed.\n\nRaises a `GraphError` if vertex is not part of the graph.\n\n```\ng = CGL::Graph(String).new(edges: [{\"a\", \"b\"}, {\"b\", \"c\"}])\ng.size # => 2\ng.remove_vertex(\"b\")\ng.size # => 0\n```","summary":"<p>Remove given vertex <em>v</em> from this graph.</p>","abstract":true,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(v : V)","args_html":"(v : V)","location":{"filename":"src/cgl/igraph.cr","line_number":83,"url":null},"def":{"name":"remove_vertex","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"shortest_path(source:V,target:V)-instance-method","html_id":"shortest_path(source:V,target:V)-instance-method","name":"shortest_path","doc":"Returns a shortest path between the given vertices.\n\nNote: Tries to select the most appropriate algorithm for `self`.","summary":"<p>Returns a shortest path between the given vertices.</p>","abstract":false,"args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":"V"},{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":"V"}],"args_string":"(source : V, target : V)","args_html":"(source : V, target : V)","location":{"filename":"src/cgl/algorithms/paths/shortest.cr","line_number":6,"url":null},"def":{"name":"shortest_path","args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":"V"},{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (has_vertex?(source)) && (has_vertex?(target))\nelse\n  raise(GraphError.new(\"Vertices #{source} and/or #{target} are not in the graph\"))\nend\nif weighted?\n  shortest_path_dijkstra(source, target)\nelse\n  shortest_path_unweighted(source, target)\nend\n"}},{"id":"shortest_path_dijkstra(source:V,target:V)-instance-method","html_id":"shortest_path_dijkstra(source:V,target:V)-instance-method","name":"shortest_path_dijkstra","doc":"Returns the shortest *weighted* path between the given vertices.\n\nRaises if `self` is not a weighted graph.\n\nNote: Uses Dijkstra's algorithm. Not appropriate for graphs\nwith negative weights and/or negative cycles.","summary":"<p>Returns the shortest <em>weighted</em> path between the given vertices.</p>","abstract":false,"args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":"V"},{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":"V"}],"args_string":"(source : V, target : V)","args_html":"(source : V, target : V)","location":{"filename":"src/cgl/algorithms/paths/shortest.cr","line_number":63,"url":null},"def":{"name":"shortest_path_dijkstra","args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":"V"},{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if weighted?\nelse\n  raise(GraphError.new(\"a weighted graph is required for this operation\"))\nend\nif (has_vertex?(source)) && (has_vertex?(target))\nelse\n  raise(GraphError.new(\"Vertices #{source} and/or #{target} are not in the graph\"))\nend\nfound = source == target\nheap = BinaryHeap(V).new\ndist = Hash(V, Float64).new(Float64::INFINITY)\npred = Hash(V, V).new\ndist[source] = 0.0\npred[source] = source\nheap.push(Float64::INFINITY, source)\nwhile !heap.empty?\n  u = heap.pop\n  if u == target\n    found = true\n    break\n  end\n  self.each_adjacent(u) do |v|\n    cost = dist[u] + (weight_of(u, v)).not_nil!\n    if cost < dist[u]\n      raise(GraphError.new(\"Found negative weights along the path.Dijkstra's algorithm is not appropriate\"))\n    end\n    if cost < dist[v]\n      dist[v] = cost\n      pred[v] = u\n      if heap.includes?(v)\n        heap.adjust(v, cost)\n      else\n        heap.push(cost, v)\n      end\n    end\n  end\nend\nif found\n  build_shortest_path_from_predecessors(source, target, pred)\nelse\n  raise(GraphError.new(\"No path between #{source} and #{target} found in graph\"))\nend\n"}},{"id":"shortest_path_unweighted(source:V,target:V)-instance-method","html_id":"shortest_path_unweighted(source:V,target:V)-instance-method","name":"shortest_path_unweighted","doc":"Returns the shortest *unweighted* path between the given vertices.","summary":"<p>Returns the shortest <em>unweighted</em> path between the given vertices.</p>","abstract":false,"args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":"V"},{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":"V"}],"args_string":"(source : V, target : V)","args_html":"(source : V, target : V)","location":{"filename":"src/cgl/algorithms/paths/shortest.cr","line_number":19,"url":null},"def":{"name":"shortest_path_unweighted","args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":"V"},{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"pred = Hash(V, V).new\nqueue = Deque(V) {source}\npred[source] = source\nfound = source == target\nwhile (u = queue.shift?)\n  if u == target\n    found = true\n    break\n  end\n  self.each_adjacent(u) do |v|\n    if pred.has_key?(v)\n    else\n      queue.push(v)\n      pred[v] = u\n    end\n  end\nend\nif found\n  build_shortest_path_from_predecessors(source, target, pred)\nelse\n  raise(GraphError.new(\"No path between #{source} and #{target} found in graph\"))\nend\n"}},{"id":"size:Int32-instance-method","html_id":"size:Int32-instance-method","name":"size","doc":"Returns the number of edges in `self`.","summary":"<p>Returns the number of edges in <code>self</code>.</p>","abstract":true,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/cgl/igraph.cr","line_number":108,"url":null},"def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":""}},{"id":"subgraph(vertices:Enumerable(V),*,clone:Bool=false):AnyGraph(V)-instance-method","html_id":"subgraph(vertices:Enumerable(V),*,clone:Bool=false):AnyGraph(V)-instance-method","name":"subgraph","doc":"Returns a subgraph containing the given *vertices*\nas well as the existing edges between those vertices.\n\nIf *copy* is set to `true`, the vertices as well as edge attributes are\ndeep copies, otherwise they are shallow copies.","summary":"<p>Returns a subgraph containing the given <em>vertices</em> as well as the existing edges between those vertices.</p>","abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"","external_name":"vertices","restriction":"Enumerable(V)"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"clone","doc":null,"default_value":"false","external_name":"clone","restriction":"Bool"}],"args_string":"(vertices : Enumerable(V), *, clone : Bool = <span class=\"n\">false</span>) : AnyGraph(V)","args_html":"(vertices : Enumerable(V), *, clone : Bool = <span class=\"n\">false</span>) : <a href=\"../CGL/AnyGraph.html\">AnyGraph</a>(V)","location":{"filename":"src/cgl/igraph.cr","line_number":220,"url":null},"def":{"name":"subgraph","args":[{"name":"vertices","doc":null,"default_value":"","external_name":"vertices","restriction":"Enumerable(V)"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"clone","doc":null,"default_value":"false","external_name":"clone","restriction":"Bool"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"AnyGraph(V)","visibility":"Public","body":"subgraph = ({{ @type }}).new(default_weight: self.default_weight, &self.label_block)\nto_include = vertices.to_set\nvertices.each do |v|\n  each_edge_from(v) do |edge|\n    if to_include.includes?(edge.v)\n      subgraph.add_edge(clone ? edge.clone : edge)\n    end\n  end\nend\nsubgraph\n"}},{"id":"subgraph(edges:Enumerable(AnyEdge(V)),*,clone:Bool=false):AnyGraph(V)-instance-method","html_id":"subgraph(edges:Enumerable(AnyEdge(V)),*,clone:Bool=false):AnyGraph(V)-instance-method","name":"subgraph","doc":"Returns a subgraph containing the given *edges*.\n\nIf *copy* is set to `true`, the vertices as well as edge attributes are\ndeep copies, otherwise they are shallow copies.","summary":"<p>Returns a subgraph containing the given <em>edges</em>.</p>","abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"clone","doc":null,"default_value":"false","external_name":"clone","restriction":"Bool"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, clone : Bool = <span class=\"n\">false</span>) : AnyGraph(V)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, clone : Bool = <span class=\"n\">false</span>) : <a href=\"../CGL/AnyGraph.html\">AnyGraph</a>(V)","location":{"filename":"src/cgl/igraph.cr","line_number":237,"url":null},"def":{"name":"subgraph","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"clone","doc":null,"default_value":"false","external_name":"clone","restriction":"Bool"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"AnyGraph(V)","visibility":"Public","body":"subgraph = ({{ @type }}).new(default_weight: self.default_weight, &self.label_block)\nedges.each do |edge|\n  if has_edge?(edge)\n    subgraph.add_edge(clone ? edge.clone : edge)\n  end\nend\nsubgraph\n"}},{"id":"to_a:Array(AnyEdge(V))-instance-method","html_id":"to_a:Array(AnyEdge(V))-instance-method","name":"to_a","doc":"See `#edges`.","summary":"<p>See <code><a href=\"../CGL/AnyGraph.html#edges:Array(AnyEdge(V))-instance-method\">#edges</a></code>.</p>","abstract":false,"args":[],"args_string":" : Array(AnyEdge(V))","args_html":" : Array(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V))","location":{"filename":"src/cgl/igraph.cr","line_number":60,"url":null},"def":{"name":"to_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(AnyEdge(V))","visibility":"Public","body":"self.edges"}},{"id":"to_dot(path:String)-instance-method","html_id":"to_dot(path:String)-instance-method","name":"to_dot","doc":"Generates a DOT file representing the graph at the given *path*.","summary":"<p>Generates a DOT file representing the graph at the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"args_string":"(path : String)","args_html":"(path : String)","location":{"filename":"src/cgl/format/dot.cr","line_number":35,"url":null},"def":{"name":"to_dot","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (File.extname(path)).empty?\n  path = \"#{path}.dot\"\nend\nFile.open(path, \"w+\") do |file|\n  to_dot(file)\nend\n"}},{"id":"to_dot(io:IO)-instance-method","html_id":"to_dot(io:IO)-instance-method","name":"to_dot","doc":"Generates a DOT representation of the graph using the given `IO`.","summary":"<p>Generates a DOT representation of the graph using the given <code>IO</code>.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/cgl/format/dot.cr","line_number":41,"url":null},"def":{"name":"to_dot","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(DotVisitor.new(self, io)).generate"}},{"id":"weight_of(u:V,v:V)-instance-method","html_id":"weight_of(u:V,v:V)-instance-method","name":"weight_of","doc":"Returns the weight associated with the given edge if it exists, otherwise\n`EdgeError` otherwise.","summary":"<p>Returns the weight associated with the given edge if it exists, otherwise <code><a href=\"../CGL/EdgeError.html\">EdgeError</a></code> otherwise.</p>","abstract":true,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(u : V, v : V)","args_html":"(u : V, v : V)","location":{"filename":"src/cgl/igraph.cr","line_number":136,"url":null},"def":{"name":"weight_of","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"weight_of?(u:V,v:V)-instance-method","html_id":"weight_of?(u:V,v:V)-instance-method","name":"weight_of?","doc":"Returns the weight associated with the given edge if it exists, otherwise\nreturns `nil`.","summary":"<p>Returns the weight associated with the given edge if it exists, otherwise returns <code>nil</code>.</p>","abstract":true,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(u : V, v : V)","args_html":"(u : V, v : V)","location":{"filename":"src/cgl/igraph.cr","line_number":144,"url":null},"def":{"name":"weight_of?","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"weighted?:Bool-instance-method","html_id":"weighted?:Bool-instance-method","name":"weighted?","doc":"Whether edges are weighted.","summary":"<p>Whether edges are weighted.</p>","abstract":true,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/cgl/igraph.cr","line_number":129,"url":null},"def":{"name":"weighted?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"cgl/CGL/BFSIterator","path":"CGL/BFSIterator.html","kind":"class","full_name":"CGL::BFSIterator(V)","name":"BFSIterator","abstract":false,"superclass":{"html_id":"cgl/CGL/GraphSourceIterator","kind":"class","full_name":"CGL::GraphSourceIterator","name":"GraphSourceIterator"},"ancestors":[{"html_id":"cgl/CGL/GraphSourceIterator","kind":"class","full_name":"CGL::GraphSourceIterator","name":"GraphSourceIterator"},{"html_id":"cgl/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"cgl/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/traversal/breadth_first_search.cr","line_number":6,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":"A `BFSIterator` can be used to traverse a graph from a given vertex `V` in\na Breadth-first search fashion.","summary":"<p>A <code><a href=\"../CGL/BFSIterator.html\">BFSIterator</a></code> can be used to traverse a graph from a given vertex <code>V</code> in a Breadth-first search fashion.</p>","class_methods":[],"constructors":[{"id":"new(graph:AnyGraph(V),start:V,*,colors:Hash(V,Color)?=nil)-class-method","html_id":"new(graph:AnyGraph(V),start:V,*,colors:Hash(V,Color)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":"AnyGraph(V)"},{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"V"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"colors","doc":null,"default_value":"nil","external_name":"colors","restriction":"Hash(V, Color) | ::Nil"}],"args_string":"(graph : AnyGraph(V), start : V, *, colors : Hash(V, Color)? = <span class=\"n\">nil</span>)","args_html":"(graph : <a href=\"../CGL/AnyGraph.html\">AnyGraph</a>(V), start : V, *, colors : Hash(V, <a href=\"../CGL/Color.html\">Color</a>)? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/traversal/iterators.cr","line_number":41,"url":null},"def":{"name":"new","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":"AnyGraph(V)"},{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"V"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"colors","doc":null,"default_value":"nil","external_name":"colors","restriction":"Hash(V, Color) | ::Nil"}],"double_splat":null,"splat_index":2,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = BFSIterator(V).allocate\n_.initialize(graph, start, colors: colors)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cgl/CGL/BinaryHeap","path":"CGL/BinaryHeap.html","kind":"class","full_name":"CGL::BinaryHeap(T)","name":"BinaryHeap","abstract":false,"superclass":{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/utils/binary_heap.cr","line_number":10,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":"A simple priority queue implemented as a array-based heap.\n\nEach inserted elements is given a certain priority, based on the result of\nthe comparison. This is a min-heap, which means retrieving an element will\nalways return the one with the highest priority.\n\nTo avoid O(n) complexity when deleting an arbitrary element, a map is\nused to cache indices for each element.","summary":"<p>A simple priority queue implemented as a array-based heap.</p>","class_methods":[],"constructors":[{"id":"new(initial_capacity:Int)-class-method","html_id":"new(initial_capacity:Int)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"initial_capacity","doc":null,"default_value":"","external_name":"initial_capacity","restriction":"Int"}],"args_string":"(initial_capacity : Int)","args_html":"(initial_capacity : Int)","location":{"filename":"src/cgl/utils/binary_heap.cr","line_number":26,"url":null},"def":{"name":"new","args":[{"name":"initial_capacity","doc":null,"default_value":"","external_name":"initial_capacity","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = BinaryHeap(T).allocate\n_.initialize(initial_capacity)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Creates a new empty BinaryHeap.","summary":"<p>Creates a new empty BinaryHeap.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/utils/binary_heap.cr","line_number":19,"url":null},"def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = BinaryHeap(T).allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:BinaryHeap):Bool-instance-method","html_id":"==(other:BinaryHeap):Bool-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"BinaryHeap"}],"args_string":"(other : BinaryHeap) : Bool","args_html":"(other : <a href=\"../CGL/BinaryHeap.html\">BinaryHeap</a>) : Bool","location":{"filename":"src/cgl/utils/binary_heap.cr","line_number":93,"url":null},"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"BinaryHeap"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(size == other.size) && (to_slice == other.to_slice)"}},{"id":"==(other):Bool-instance-method","html_id":"==(other):Bool-instance-method","name":"==","doc":"Returns `false` (other can only be a `Value` here).","summary":"<p>Returns <code>false</code> (other can only be a <code>Value</code> here).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other) : Bool","args_html":"(other) : Bool","location":{"filename":"src/cgl/utils/binary_heap.cr","line_number":97,"url":null},"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"false"}},{"id":"adjust(value:T,withnew_priority:Number)-instance-method","html_id":"adjust(value:T,withnew_priority:Number)-instance-method","name":"adjust","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"},{"name":"new_priority","doc":null,"default_value":"","external_name":"with","restriction":"Number"}],"args_string":"(value : T, with new_priority : Number)","args_html":"(value : T, with new_priority : Number)","location":{"filename":"src/cgl/utils/binary_heap.cr","line_number":127,"url":null},"def":{"name":"adjust","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"},{"name":"new_priority","doc":null,"default_value":"","external_name":"with","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"index = @cache[value]\n@heap[index] = {new_priority.to_f, value}\nif index > 1 && new_priority < @heap[index >> 1][0]\n  sift_up!(index)\nelse\n  sift_down!(index)\nend\n"}},{"id":"clear-instance-method","html_id":"clear-instance-method","name":"clear","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/utils/binary_heap.cr","line_number":45,"url":null},"def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@heap.clear(@size)\n@cache.clear\n@size = 0\nself\n"}},{"id":"delete(value:T):T?-instance-method","html_id":"delete(value:T):T?-instance-method","name":"delete","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(value : T) : T?","args_html":"(value : T) : T?","location":{"filename":"src/cgl/utils/binary_heap.cr","line_number":120,"url":null},"def":{"name":"delete","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"if @size == 0\n  raise(\"heap is empty\")\nend\nindex = @cache[value]\n@cache.delete(value)\n(delete_at(index))[1]\n"}},{"id":"empty?:Bool-instance-method","html_id":"empty?:Bool-instance-method","name":"empty?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/cgl/utils/binary_heap.cr","line_number":41,"url":null},"def":{"name":"empty?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@size == 0"}},{"id":"heapify!-instance-method","html_id":"heapify!-instance-method","name":"heapify!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/utils/binary_heap.cr","line_number":192,"url":null},"def":{"name":"heapify!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"index = @size >> 1\nwhile index >= 0\n  sift_down!(index)\n  index = index - 1\nend\n"}},{"id":"includes?(value:T):Bool-instance-method","html_id":"includes?(value:T):Bool-instance-method","name":"includes?","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(value : T) : Bool","args_html":"(value : T) : Bool","location":{"filename":"src/cgl/utils/binary_heap.cr","line_number":116,"url":null},"def":{"name":"includes?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@cache.has_key?(value)"}},{"id":"inspect(io)-instance-method","html_id":"inspect(io)-instance-method","name":"inspect","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/cgl/utils/binary_heap.cr","line_number":101,"url":null},"def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"((((io << \"<\") << self.class.name) << \": size=\") << (size.to_s(io))) << \", top=\"\n(io << (peek.to_s(io))) << \">\"\nnil\n"}},{"id":"next_priority:Float64-instance-method","html_id":"next_priority:Float64-instance-method","name":"next_priority","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/cgl/utils/binary_heap.cr","line_number":64,"url":null},"def":{"name":"next_priority","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"next_priority do\n  raise(\"heap is empty.\")\nend"}},{"id":"next_priority(&)-instance-method","html_id":"next_priority(&)-instance-method","name":"next_priority","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/cgl/utils/binary_heap.cr","line_number":68,"url":null},"def":{"name":"next_priority","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"@size == 0 ? yield : @heap[1][0]"}},{"id":"peek:T-instance-method","html_id":"peek:T-instance-method","name":"peek","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : T","args_html":" : T","location":{"filename":"src/cgl/utils/binary_heap.cr","line_number":56,"url":null},"def":{"name":"peek","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"peek do\n  raise(\"heap is empty.\")\nend"}},{"id":"peek(&)-instance-method","html_id":"peek(&)-instance-method","name":"peek","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/cgl/utils/binary_heap.cr","line_number":60,"url":null},"def":{"name":"peek","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"@size == 0 ? yield : @heap[1][1]"}},{"id":"peek?:T?-instance-method","html_id":"peek?:T?-instance-method","name":"peek?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : T?","args_html":" : T?","location":{"filename":"src/cgl/utils/binary_heap.cr","line_number":52,"url":null},"def":{"name":"peek?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"peek do\n  nil\nend"}},{"id":"pop:T-instance-method","html_id":"pop:T-instance-method","name":"pop","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : T","args_html":" : T","location":{"filename":"src/cgl/utils/binary_heap.cr","line_number":72,"url":null},"def":{"name":"pop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"if @size == 0\n  raise(\"heap is empty.\")\nelse\n  _, value = delete_at(1)\n  @cache.delete(value)\n  value\nend"}},{"id":"push(priority:Number,value:T):self-instance-method","html_id":"push(priority:Number,value:T):self-instance-method","name":"push","doc":null,"summary":null,"abstract":false,"args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Number"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(priority : Number, value : T) : <span class=\"k\">self</span>","args_html":"(priority : Number, value : T) : <span class=\"k\">self</span>","location":{"filename":"src/cgl/utils/binary_heap.cr","line_number":107,"url":null},"def":{"name":"push","args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Number"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"@size = @size + 1\ncheck_needs_resize\n@heap[@size] = {priority.to_f, value}\n@cache[value] = @size\nsift_up!(@size)\nself\n"}},{"id":"size:Int32-instance-method","html_id":"size:Int32-instance-method","name":"size","doc":"Returns the number of elements in the heap.","summary":"<p>Returns the number of elements in the heap.</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/cgl/utils/binary_heap.cr","line_number":14,"url":null},"def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@size"}},{"id":"to_a:Array(Tuple(Float64,T))-instance-method","html_id":"to_a:Array(Tuple(Float64,T))-instance-method","name":"to_a","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Tuple(Float64, T))","args_html":" : Array(Tuple(Float64, T))","location":{"filename":"src/cgl/utils/binary_heap.cr","line_number":86,"url":null},"def":{"name":"to_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Tuple(Float64, T))","visibility":"Public","body":"Array(Tuple(Float64, T)).build(@size) do |pointer|\n  pointer.copy_from(@heap + 1, @size)\n  @size\nend"}},{"id":"to_slice:Slice(Tuple(Float64,T))-instance-method","html_id":"to_slice:Slice(Tuple(Float64,T))-instance-method","name":"to_slice","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Slice(Tuple(Float64, T))","args_html":" : Slice(Tuple(Float64, T))","location":{"filename":"src/cgl/utils/binary_heap.cr","line_number":82,"url":null},"def":{"name":"to_slice","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Slice(Tuple(Float64, T))","visibility":"Public","body":"(@heap + 1).to_slice(@size)"}}],"macros":[],"types":[]},{"html_id":"cgl/CGL/Color","path":"CGL/Color.html","kind":"enum","full_name":"CGL::Color","name":"Color","abstract":false,"superclass":null,"ancestors":[{"html_id":"cgl/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"cgl/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"cgl/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/traversal/iterators.cr","line_number":2,"url":null}],"repository_name":"cgl","program":false,"enum":true,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"White","name":"White","value":"0","doc":null,"summary":null},{"id":"Gray","name":"Gray","value":"1","doc":null,"summary":null},{"id":"Black","name":"Black","value":"2","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"black?-instance-method","html_id":"black?-instance-method","name":"black?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/traversal/iterators.cr","line_number":5,"url":null},"def":{"name":"black?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Black"}},{"id":"gray?-instance-method","html_id":"gray?-instance-method","name":"gray?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/traversal/iterators.cr","line_number":4,"url":null},"def":{"name":"gray?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Gray"}},{"id":"white?-instance-method","html_id":"white?-instance-method","name":"white?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/traversal/iterators.cr","line_number":3,"url":null},"def":{"name":"white?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == White"}}],"macros":[],"types":[]},{"html_id":"cgl/CGL/DFSIterator","path":"CGL/DFSIterator.html","kind":"class","full_name":"CGL::DFSIterator(V)","name":"DFSIterator","abstract":false,"superclass":{"html_id":"cgl/CGL/GraphSourceIterator","kind":"class","full_name":"CGL::GraphSourceIterator","name":"GraphSourceIterator"},"ancestors":[{"html_id":"cgl/CGL/GraphSourceIterator","kind":"class","full_name":"CGL::GraphSourceIterator","name":"GraphSourceIterator"},{"html_id":"cgl/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"cgl/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/traversal/depth_first_search.cr","line_number":6,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":"A `DFSIterator` can be used to traverse a graph from a given vertex `V` in\na Depth-first search fashion.","summary":"<p>A <code><a href=\"../CGL/DFSIterator.html\">DFSIterator</a></code> can be used to traverse a graph from a given vertex <code>V</code> in a Depth-first search fashion.</p>","class_methods":[],"constructors":[{"id":"new(graph:AnyGraph(V),start:V,*,colors:Hash(V,Color)?=nil)-class-method","html_id":"new(graph:AnyGraph(V),start:V,*,colors:Hash(V,Color)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":"AnyGraph(V)"},{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"V"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"colors","doc":null,"default_value":"nil","external_name":"colors","restriction":"Hash(V, Color) | ::Nil"}],"args_string":"(graph : AnyGraph(V), start : V, *, colors : Hash(V, Color)? = <span class=\"n\">nil</span>)","args_html":"(graph : <a href=\"../CGL/AnyGraph.html\">AnyGraph</a>(V), start : V, *, colors : Hash(V, <a href=\"../CGL/Color.html\">Color</a>)? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/traversal/iterators.cr","line_number":41,"url":null},"def":{"name":"new","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":"AnyGraph(V)"},{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"V"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"colors","doc":null,"default_value":"nil","external_name":"colors","restriction":"Hash(V, Color) | ::Nil"}],"double_splat":null,"splat_index":2,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = DFSIterator(V).allocate\n_.initialize(graph, start, colors: colors)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cgl/CGL/DiEdge","path":"CGL/DiEdge.html","kind":"struct","full_name":"CGL::DiEdge(V)","name":"DiEdge","abstract":false,"superclass":{"html_id":"cgl/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cgl/CGL/Directed","kind":"module","full_name":"CGL::Directed","name":"Directed"},{"html_id":"cgl/CGL/AnyEdge","kind":"module","full_name":"CGL::AnyEdge","name":"AnyEdge"},{"html_id":"cgl/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cgl/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/edges.cr","line_number":122,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"cgl/CGL/Directed","kind":"module","full_name":"CGL::Directed","name":"Directed"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(u:V,v:V)-class-method","html_id":"new(u:V,v:V)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(u : V, v : V)","args_html":"(u : V, v : V)","location":{"filename":"src/cgl/edges.cr","line_number":6,"url":null},"def":{"name":"new","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = DiEdge(V).allocate\n_.initialize(u, v)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cgl/CGL/DiGraph","path":"CGL/DiGraph.html","kind":"class","full_name":"CGL::DiGraph(V)","name":"DiGraph","abstract":false,"superclass":{"html_id":"cgl/CGL/AdjacencyDiGraph","kind":"class","full_name":"CGL::AdjacencyDiGraph","name":"AdjacencyDiGraph"},"ancestors":[{"html_id":"cgl/CGL/AdjacencyDiGraph","kind":"class","full_name":"CGL::AdjacencyDiGraph","name":"AdjacencyDiGraph"},{"html_id":"cgl/CGL/AdjacencyHash","kind":"module","full_name":"CGL::AdjacencyHash","name":"AdjacencyHash"},{"html_id":"cgl/CGL/AbstractDiGraph","kind":"class","full_name":"CGL::AbstractDiGraph","name":"AbstractDiGraph"},{"html_id":"cgl/CGL/AnyGraph","kind":"class","full_name":"CGL::AnyGraph","name":"AnyGraph"},{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/digraph.cr","line_number":2,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(Nil?)?=nil,*,default_weight:Nil?=nil,&block:->Nil?)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(Nil?)?=nil,*,default_weight:Nil?=nil,&block:->Nil?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(Nil?)? = <span class=\"n\">nil</span>, *, default_weight : Nil? = <span class=\"n\">nil</span>, &block :  -> Nil?)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(Nil?)? = <span class=\"n\">nil</span>, *, default_weight : Nil? = <span class=\"n\">nil</span>, &block :  -> Nil?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":44,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":4,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = DiGraph(V).allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(Nil?)?=nil,*,default_weight:Nil?=nil,default_label:Nil?=nil)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(Nil?)?=nil,*,default_weight:Nil?=nil,default_label:Nil?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(Nil?)? = <span class=\"n\">nil</span>, *, default_weight : Nil? = <span class=\"n\">nil</span>, default_label : Nil? = <span class=\"n\">nil</span>)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(Nil?)? = <span class=\"n\">nil</span>, *, default_weight : Nil? = <span class=\"n\">nil</span>, default_label : Nil? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":57,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":4,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = DiGraph(V).allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:Nil?=nil,&block:->Nil?)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:Nil?=nil,&block:->Nil?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : Nil? = <span class=\"n\">nil</span>, &block :  -> Nil?)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : Nil? = <span class=\"n\">nil</span>, &block :  -> Nil?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":70,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":1,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = DiGraph(V).allocate\n_.initialize(edges, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:Nil?=nil,default_label:Nil?=nil)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:Nil?=nil,default_label:Nil?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : Nil? = <span class=\"n\">nil</span>, default_label : Nil? = <span class=\"n\">nil</span>)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : Nil? = <span class=\"n\">nil</span>, default_label : Nil? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":79,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = DiGraph(V).allocate\n_.initialize(edges, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cgl/CGL/Directed","path":"CGL/Directed.html","kind":"module","full_name":"CGL::Directed(V)","name":"Directed","abstract":false,"superclass":null,"ancestors":[{"html_id":"cgl/CGL/AnyEdge","kind":"module","full_name":"CGL::AnyEdge","name":"AnyEdge"}],"locations":[{"filename":"src/cgl/edges.cr","line_number":41,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"cgl/CGL/AnyEdge","kind":"module","full_name":"CGL::AnyEdge","name":"AnyEdge"}],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"cgl/CGL/DiEdge","kind":"struct","full_name":"CGL::DiEdge(V)","name":"DiEdge"},{"html_id":"cgl/CGL/LDiEdge","kind":"struct","full_name":"CGL::LDiEdge(V, L)","name":"LDiEdge"},{"html_id":"cgl/CGL/WDiEdge","kind":"struct","full_name":"CGL::WDiEdge(V, W)","name":"WDiEdge"}],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"==(other:AnyEdge)-instance-method","html_id":"==(other:AnyEdge)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"AnyEdge"}],"args_string":"(other : AnyEdge)","args_html":"(other : <a href=\"../CGL/AnyEdge.html\">AnyEdge</a>)","location":{"filename":"src/cgl/edges.cr","line_number":44,"url":null},"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"AnyEdge"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"((@u == other.u) && (@v == other.v))"}},{"id":"hash(hasher)-instance-method","html_id":"hash(hasher)-instance-method","name":"hash","doc":null,"summary":null,"abstract":false,"args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","location":{"filename":"src/cgl/edges.cr","line_number":52,"url":null},"def":{"name":"hash","args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"hasher = @u.hash(hasher)\nhasher = @v.hash(hasher)\nhasher\n"}},{"id":"reverse-instance-method","html_id":"reverse-instance-method","name":"reverse","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/edges.cr","line_number":48,"url":null},"def":{"name":"reverse","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"({{ @type }}).new(@v, @u)"}}],"macros":[],"types":[]},{"html_id":"cgl/CGL/DotVisitor","path":"CGL/DotVisitor.html","kind":"class","full_name":"CGL::DotVisitor(V)","name":"DotVisitor","abstract":false,"superclass":{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cgl/CGL/Visitor","kind":"module","full_name":"CGL::Visitor","name":"Visitor"},{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/format/dot.cr","line_number":2,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"cgl/CGL/Visitor","kind":"module","full_name":"CGL::Visitor","name":"Visitor"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(graph:AnyGraph(V),io:IO)-class-method","html_id":"new(graph:AnyGraph(V),io:IO)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":"AnyGraph(V)"},{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(graph : AnyGraph(V), io : IO)","args_html":"(graph : <a href=\"../CGL/AnyGraph.html\">AnyGraph</a>(V), io : IO)","location":{"filename":"src/cgl/format/dot.cr","line_number":5,"url":null},"def":{"name":"new","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":"AnyGraph(V)"},{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = DotVisitor(V).allocate\n_.initialize(graph, io)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"generate-instance-method","html_id":"generate-instance-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/format/dot.cr","line_number":12,"url":null},"def":{"name":"generate","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"write(@graph.directed? ? \"digraph\" : \"graph\")\nwrite('{')\n@graph.accept(self)\nwrite('}')\n"}},{"id":"visit(edge:Undirected(V))-instance-method","html_id":"visit(edge:Undirected(V))-instance-method","name":"visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"edge","doc":null,"default_value":"","external_name":"edge","restriction":"Undirected(V)"}],"args_string":"(edge : Undirected(V))","args_html":"(edge : <a href=\"../CGL/Undirected.html\">Undirected</a>(V))","location":{"filename":"src/cgl/format/dot.cr","line_number":21,"url":null},"def":{"name":"visit","args":[{"name":"edge","doc":null,"default_value":"","external_name":"edge","restriction":"Undirected(V)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"write(\"\\\"#{edge.u}\\\" -- \\\"#{edge.v}\\\";\")"}},{"id":"visit(edge:Directed(V))-instance-method","html_id":"visit(edge:Directed(V))-instance-method","name":"visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"edge","doc":null,"default_value":"","external_name":"edge","restriction":"Directed(V)"}],"args_string":"(edge : Directed(V))","args_html":"(edge : <a href=\"../CGL/Directed.html\">Directed</a>(V))","location":{"filename":"src/cgl/format/dot.cr","line_number":25,"url":null},"def":{"name":"visit","args":[{"name":"edge","doc":null,"default_value":"","external_name":"edge","restriction":"Directed(V)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"write(\"\\\"#{edge.u}\\\" -> \\\"#{edge.v}\\\";\")"}},{"id":"visit(visitable)-instance-method","html_id":"visit(visitable)-instance-method","name":"visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"visitable","doc":null,"default_value":"","external_name":"visitable","restriction":""}],"args_string":"(visitable)","args_html":"(visitable)","location":{"filename":"src/cgl/format/dot.cr","line_number":29,"url":null},"def":{"name":"visit","args":[{"name":"visitable","doc":null,"default_value":"","external_name":"visitable","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"cgl/CGL/Edge","path":"CGL/Edge.html","kind":"struct","full_name":"CGL::Edge(V)","name":"Edge","abstract":false,"superclass":{"html_id":"cgl/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cgl/CGL/Undirected","kind":"module","full_name":"CGL::Undirected","name":"Undirected"},{"html_id":"cgl/CGL/AnyEdge","kind":"module","full_name":"CGL::AnyEdge","name":"AnyEdge"},{"html_id":"cgl/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cgl/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/edges.cr","line_number":108,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"cgl/CGL/Undirected","kind":"module","full_name":"CGL::Undirected","name":"Undirected"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(u:V,v:V)-class-method","html_id":"new(u:V,v:V)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"args_string":"(u : V, v : V)","args_html":"(u : V, v : V)","location":{"filename":"src/cgl/edges.cr","line_number":6,"url":null},"def":{"name":"new","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"V"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Edge(V).allocate\n_.initialize(u, v)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cgl/CGL/EdgeError","path":"CGL/EdgeError.html","kind":"class","full_name":"CGL::EdgeError","name":"EdgeError","abstract":false,"superclass":{"html_id":"cgl/CGL/GraphError","kind":"class","full_name":"CGL::GraphError","name":"GraphError"},"ancestors":[{"html_id":"cgl/CGL/GraphError","kind":"class","full_name":"CGL::GraphError","name":"GraphError"},{"html_id":"cgl/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/errors.cr","line_number":5,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cgl/CGL/EdgeIterator","path":"CGL/EdgeIterator.html","kind":"class","full_name":"CGL::EdgeIterator(V)","name":"EdgeIterator","abstract":false,"superclass":{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cgl/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"cgl/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/traversal/iterators.cr","line_number":76,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"cgl/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(graph)-class-method","html_id":"new(graph)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""}],"args_string":"(graph)","args_html":"(graph)","location":{"filename":"src/cgl/traversal/iterators.cr","line_number":85,"url":null},"def":{"name":"new","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = EdgeIterator(V).allocate\n_.initialize(graph)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"next-instance-method","html_id":"next-instance-method","name":"next","doc":"Returns the next element in this iterator, or `Iterator::Stop::INSTANCE` if there\nare no more elements.","summary":"<p>Returns the next element in this iterator, or <code>Iterator::Stop::INSTANCE</code> if there are no more elements.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/traversal/iterators.cr","line_number":89,"url":null},"def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"loop do\n  if u = next_u\n    if v = get_v(u)\n      edge = @graph.edge(u, v)\n      if @graph.directed?\n        return edge\n      else\n        if !(@visited.includes?(edge))\n          @visited << edge\n          return edge\n        end\n      end\n    else\n      @u = nil\n      @adj_it = nil\n    end\n  else\n    return stop\n  end\nend"}}],"macros":[],"types":[]},{"html_id":"cgl/CGL/Graph","path":"CGL/Graph.html","kind":"class","full_name":"CGL::Graph(V)","name":"Graph","abstract":false,"superclass":{"html_id":"cgl/CGL/AdjacencyGraph","kind":"class","full_name":"CGL::AdjacencyGraph","name":"AdjacencyGraph"},"ancestors":[{"html_id":"cgl/CGL/AdjacencyGraph","kind":"class","full_name":"CGL::AdjacencyGraph","name":"AdjacencyGraph"},{"html_id":"cgl/CGL/AdjacencyHash","kind":"module","full_name":"CGL::AdjacencyHash","name":"AdjacencyHash"},{"html_id":"cgl/CGL/AbstractGraph","kind":"class","full_name":"CGL::AbstractGraph","name":"AbstractGraph"},{"html_id":"cgl/CGL/AnyGraph","kind":"class","full_name":"CGL::AnyGraph","name":"AnyGraph"},{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/graph.cr","line_number":2,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(Nil?)?=nil,*,default_weight:Nil?=nil,&block:->Nil?)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(Nil?)?=nil,*,default_weight:Nil?=nil,&block:->Nil?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(Nil?)? = <span class=\"n\">nil</span>, *, default_weight : Nil? = <span class=\"n\">nil</span>, &block :  -> Nil?)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(Nil?)? = <span class=\"n\">nil</span>, *, default_weight : Nil? = <span class=\"n\">nil</span>, &block :  -> Nil?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":44,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":4,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = Graph(V).allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(Nil?)?=nil,*,default_weight:Nil?=nil,default_label:Nil?=nil)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(Nil?)?=nil,*,default_weight:Nil?=nil,default_label:Nil?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(Nil?)? = <span class=\"n\">nil</span>, *, default_weight : Nil? = <span class=\"n\">nil</span>, default_label : Nil? = <span class=\"n\">nil</span>)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(Nil?)? = <span class=\"n\">nil</span>, *, default_weight : Nil? = <span class=\"n\">nil</span>, default_label : Nil? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":57,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":4,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Graph(V).allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:Nil?=nil,&block:->Nil?)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:Nil?=nil,&block:->Nil?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : Nil? = <span class=\"n\">nil</span>, &block :  -> Nil?)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : Nil? = <span class=\"n\">nil</span>, &block :  -> Nil?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":70,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":1,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = Graph(V).allocate\n_.initialize(edges, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:Nil?=nil,default_label:Nil?=nil)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:Nil?=nil,default_label:Nil?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : Nil? = <span class=\"n\">nil</span>, default_label : Nil? = <span class=\"n\">nil</span>)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : Nil? = <span class=\"n\">nil</span>, default_label : Nil? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":79,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Graph(V).allocate\n_.initialize(edges, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cgl/CGL/GraphError","path":"CGL/GraphError.html","kind":"class","full_name":"CGL::GraphError","name":"GraphError","abstract":false,"superclass":{"html_id":"cgl/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"cgl/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/errors.cr","line_number":2,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"cgl/CGL/EdgeError","kind":"class","full_name":"CGL::EdgeError","name":"EdgeError"}],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cgl/CGL/GraphIterator","path":"CGL/GraphIterator.html","kind":"class","full_name":"CGL::GraphIterator(V)","name":"GraphIterator","abstract":true,"superclass":{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/traversal/iterators.cr","line_number":8,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(graph:AnyGraph(V))-class-method","html_id":"new(graph:AnyGraph(V))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":"AnyGraph(V)"}],"args_string":"(graph : AnyGraph(V))","args_html":"(graph : <a href=\"../CGL/AnyGraph.html\">AnyGraph</a>(V))","location":{"filename":"src/cgl/traversal/iterators.cr","line_number":11,"url":null},"def":{"name":"new","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":"AnyGraph(V)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = GraphIterator(V).allocate\n_.initialize(graph)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cgl/CGL/GraphSourceIterator","path":"CGL/GraphSourceIterator.html","kind":"class","full_name":"CGL::GraphSourceIterator(V)","name":"GraphSourceIterator","abstract":true,"superclass":{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cgl/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"cgl/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/traversal/iterators.cr","line_number":34,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"cgl/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"extended_modules":[],"subclasses":[{"html_id":"cgl/CGL/BFSIterator","kind":"class","full_name":"CGL::BFSIterator(V)","name":"BFSIterator"},{"html_id":"cgl/CGL/DFSIterator","kind":"class","full_name":"CGL::DFSIterator(V)","name":"DFSIterator"}],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(graph:AnyGraph(V),start:V,*,colors:Hash(V,Color)?=nil)-class-method","html_id":"new(graph:AnyGraph(V),start:V,*,colors:Hash(V,Color)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":"AnyGraph(V)"},{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"V"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"colors","doc":null,"default_value":"nil","external_name":"colors","restriction":"Hash(V, Color) | ::Nil"}],"args_string":"(graph : AnyGraph(V), start : V, *, colors : Hash(V, Color)? = <span class=\"n\">nil</span>)","args_html":"(graph : <a href=\"../CGL/AnyGraph.html\">AnyGraph</a>(V), start : V, *, colors : Hash(V, <a href=\"../CGL/Color.html\">Color</a>)? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/traversal/iterators.cr","line_number":41,"url":null},"def":{"name":"new","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":"AnyGraph(V)"},{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"V"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"colors","doc":null,"default_value":"nil","external_name":"colors","restriction":"Hash(V, Color) | ::Nil"}],"double_splat":null,"splat_index":2,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = GraphSourceIterator(V).allocate\n_.initialize(graph, start, colors: colors)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"has_next?-instance-method","html_id":"has_next?-instance-method","name":"has_next?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/traversal/iterators.cr","line_number":53,"url":null},"def":{"name":"has_next?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"!@deque.empty?"}},{"id":"next-instance-method","html_id":"next-instance-method","name":"next","doc":"Returns the next element in this iterator, or `Iterator::Stop::INSTANCE` if there\nare no more elements.","summary":"<p>Returns the next element in this iterator, or <code>Iterator::Stop::INSTANCE</code> if there are no more elements.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/traversal/iterators.cr","line_number":59,"url":null},"def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if has_next?\n  u = next_vertex\n  @graph.each_adjacent(u) do |v|\n    if @colors[v].white?\n      @colors[v] = Color::Gray\n      @deque.push(v)\n    end\n  end\n  @colors[u] = Color::Black\n  u\nelse\n  stop\nend"}}],"macros":[],"types":[]},{"html_id":"cgl/CGL/Labelable","path":"CGL/Labelable.html","kind":"module","full_name":"CGL::Labelable(L)","name":"Labelable","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/cgl/edges.cr","line_number":55,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"cgl/CGL/LDiEdge","kind":"struct","full_name":"CGL::LDiEdge(V, L)","name":"LDiEdge"},{"html_id":"cgl/CGL/LEdge","kind":"struct","full_name":"CGL::LEdge(V, L)","name":"LEdge"}],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(u,v,label)-class-method","html_id":"new(u,v,label)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":""},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":""},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":""}],"args_string":"(u, v, label)","args_html":"(u, v, label)","location":{"filename":"src/cgl/edges.cr","line_number":58,"url":null},"def":{"name":"new","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":""},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":""},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(u, v, label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:Labelable)-instance-method","html_id":"==(other:Labelable)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Labelable"}],"args_string":"(other : Labelable)","args_html":"(other : <a href=\"../CGL/Labelable.html\">Labelable</a>)","location":{"filename":"src/cgl/edges.cr","line_number":70,"url":null},"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Labelable"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(super(other)) && (@label == other.label)"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/edges.cr","line_number":74,"url":null},"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.new(@u.clone, @v.clone, @label.clone)"}},{"id":"hash(hasher)-instance-method","html_id":"hash(hasher)-instance-method","name":"hash","doc":null,"summary":null,"abstract":false,"args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","location":{"filename":"src/cgl/edges.cr","line_number":65,"url":null},"def":{"name":"hash","args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"hasher = super(hasher)\n@label.hash(hasher)\n"}},{"id":"label:L?-instance-method","html_id":"label:L?-instance-method","name":"label","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : L?","args_html":" : L?","location":{"filename":"src/cgl/edges.cr","line_number":56,"url":null},"def":{"name":"label","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"L | ::Nil","visibility":"Public","body":"@label"}},{"id":"label=(label:L?)-instance-method","html_id":"label=(label:L?)-instance-method","name":"label=","doc":null,"summary":null,"abstract":false,"args":[{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"L | ::Nil"}],"args_string":"(label : L?)","args_html":"(label : L?)","location":{"filename":"src/cgl/edges.cr","line_number":56,"url":null},"def":{"name":"label=","args":[{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@label = label"}},{"id":"to_tuple-instance-method","html_id":"to_tuple-instance-method","name":"to_tuple","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/edges.cr","line_number":61,"url":null},"def":{"name":"to_tuple","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{@u, @v, @label}"}}],"macros":[],"types":[]},{"html_id":"cgl/CGL/LabeledDiGraph","path":"CGL/LabeledDiGraph.html","kind":"class","full_name":"CGL::LabeledDiGraph(V, L)","name":"LabeledDiGraph","abstract":false,"superclass":{"html_id":"cgl/CGL/AdjacencyDiGraph","kind":"class","full_name":"CGL::AdjacencyDiGraph","name":"AdjacencyDiGraph"},"ancestors":[{"html_id":"cgl/CGL/AdjacencyDiGraph","kind":"class","full_name":"CGL::AdjacencyDiGraph","name":"AdjacencyDiGraph"},{"html_id":"cgl/CGL/AdjacencyHash","kind":"module","full_name":"CGL::AdjacencyHash","name":"AdjacencyHash"},{"html_id":"cgl/CGL/AbstractDiGraph","kind":"class","full_name":"CGL::AbstractDiGraph","name":"AbstractDiGraph"},{"html_id":"cgl/CGL/AnyGraph","kind":"class","full_name":"CGL::AnyGraph","name":"AnyGraph"},{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/digraph.cr","line_number":5,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:Nil?=nil,&block:->L?)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:Nil?=nil,&block:->L?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : Nil? = <span class=\"n\">nil</span>, &block :  -> L?)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : Nil? = <span class=\"n\">nil</span>, &block :  -> L?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":44,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":4,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = LabeledDiGraph(V, L).allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:Nil?=nil,default_label:L?=nil)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:Nil?=nil,default_label:L?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : Nil? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : Nil? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":57,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":4,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = LabeledDiGraph(V, L).allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:Nil?=nil,&block:->L?)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:Nil?=nil,&block:->L?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : Nil? = <span class=\"n\">nil</span>, &block :  -> L?)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : Nil? = <span class=\"n\">nil</span>, &block :  -> L?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":70,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":1,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = LabeledDiGraph(V, L).allocate\n_.initialize(edges, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:Nil?=nil,default_label:L?=nil)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:Nil?=nil,default_label:L?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : Nil? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : Nil? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":79,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = LabeledDiGraph(V, L).allocate\n_.initialize(edges, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cgl/CGL/LabeledGraph","path":"CGL/LabeledGraph.html","kind":"class","full_name":"CGL::LabeledGraph(V, L)","name":"LabeledGraph","abstract":false,"superclass":{"html_id":"cgl/CGL/AdjacencyGraph","kind":"class","full_name":"CGL::AdjacencyGraph","name":"AdjacencyGraph"},"ancestors":[{"html_id":"cgl/CGL/AdjacencyGraph","kind":"class","full_name":"CGL::AdjacencyGraph","name":"AdjacencyGraph"},{"html_id":"cgl/CGL/AdjacencyHash","kind":"module","full_name":"CGL::AdjacencyHash","name":"AdjacencyHash"},{"html_id":"cgl/CGL/AbstractGraph","kind":"class","full_name":"CGL::AbstractGraph","name":"AbstractGraph"},{"html_id":"cgl/CGL/AnyGraph","kind":"class","full_name":"CGL::AnyGraph","name":"AnyGraph"},{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/graph.cr","line_number":5,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:Nil?=nil,&block:->L?)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:Nil?=nil,&block:->L?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : Nil? = <span class=\"n\">nil</span>, &block :  -> L?)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : Nil? = <span class=\"n\">nil</span>, &block :  -> L?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":44,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":4,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = LabeledGraph(V, L).allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:Nil?=nil,default_label:L?=nil)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:Nil?=nil,default_label:L?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : Nil? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : Nil? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":57,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":4,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = LabeledGraph(V, L).allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:Nil?=nil,&block:->L?)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:Nil?=nil,&block:->L?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : Nil? = <span class=\"n\">nil</span>, &block :  -> L?)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : Nil? = <span class=\"n\">nil</span>, &block :  -> L?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":70,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":1,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = LabeledGraph(V, L).allocate\n_.initialize(edges, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:Nil?=nil,default_label:L?=nil)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:Nil?=nil,default_label:L?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : Nil? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : Nil? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":79,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = LabeledGraph(V, L).allocate\n_.initialize(edges, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cgl/CGL/LDiEdge","path":"CGL/LDiEdge.html","kind":"struct","full_name":"CGL::LDiEdge(V, L)","name":"LDiEdge","abstract":false,"superclass":{"html_id":"cgl/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cgl/CGL/Labelable","kind":"module","full_name":"CGL::Labelable","name":"Labelable"},{"html_id":"cgl/CGL/Directed","kind":"module","full_name":"CGL::Directed","name":"Directed"},{"html_id":"cgl/CGL/AnyEdge","kind":"module","full_name":"CGL::AnyEdge","name":"AnyEdge"},{"html_id":"cgl/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cgl/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/edges.cr","line_number":131,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"cgl/CGL/Directed","kind":"module","full_name":"CGL::Directed","name":"Directed"},{"html_id":"cgl/CGL/Labelable","kind":"module","full_name":"CGL::Labelable","name":"Labelable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(u,v,label)-class-method","html_id":"new(u,v,label)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":""},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":""},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":""}],"args_string":"(u, v, label)","args_html":"(u, v, label)","location":{"filename":"src/cgl/edges.cr","line_number":58,"url":null},"def":{"name":"new","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":""},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":""},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = LDiEdge(V, L).allocate\n_.initialize(u, v, label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cgl/CGL/LEdge","path":"CGL/LEdge.html","kind":"struct","full_name":"CGL::LEdge(V, L)","name":"LEdge","abstract":false,"superclass":{"html_id":"cgl/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cgl/CGL/Labelable","kind":"module","full_name":"CGL::Labelable","name":"Labelable"},{"html_id":"cgl/CGL/Undirected","kind":"module","full_name":"CGL::Undirected","name":"Undirected"},{"html_id":"cgl/CGL/AnyEdge","kind":"module","full_name":"CGL::AnyEdge","name":"AnyEdge"},{"html_id":"cgl/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cgl/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/edges.cr","line_number":117,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"cgl/CGL/Labelable","kind":"module","full_name":"CGL::Labelable","name":"Labelable"},{"html_id":"cgl/CGL/Undirected","kind":"module","full_name":"CGL::Undirected","name":"Undirected"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(u,v,label)-class-method","html_id":"new(u,v,label)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":""},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":""},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":""}],"args_string":"(u, v, label)","args_html":"(u, v, label)","location":{"filename":"src/cgl/edges.cr","line_number":58,"url":null},"def":{"name":"new","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":""},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":""},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = LEdge(V, L).allocate\n_.initialize(u, v, label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cgl/CGL/Undirected","path":"CGL/Undirected.html","kind":"module","full_name":"CGL::Undirected(V)","name":"Undirected","abstract":false,"superclass":null,"ancestors":[{"html_id":"cgl/CGL/AnyEdge","kind":"module","full_name":"CGL::AnyEdge","name":"AnyEdge"}],"locations":[{"filename":"src/cgl/edges.cr","line_number":18,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"cgl/CGL/AnyEdge","kind":"module","full_name":"CGL::AnyEdge","name":"AnyEdge"}],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"cgl/CGL/Edge","kind":"struct","full_name":"CGL::Edge(V)","name":"Edge"},{"html_id":"cgl/CGL/LEdge","kind":"struct","full_name":"CGL::LEdge(V, L)","name":"LEdge"},{"html_id":"cgl/CGL/WEdge","kind":"struct","full_name":"CGL::WEdge(V, W)","name":"WEdge"}],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"==(other:AnyEdge)-instance-method","html_id":"==(other:AnyEdge)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"AnyEdge"}],"args_string":"(other : AnyEdge)","args_html":"(other : <a href=\"../CGL/AnyEdge.html\">AnyEdge</a>)","location":{"filename":"src/cgl/edges.cr","line_number":21,"url":null},"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"AnyEdge"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"((@u == other.u) && (@v == other.v)) || ((@v == other.u) && (@u == other.v))"}},{"id":"hash(hasher)-instance-method","html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","location":{"filename":"src/cgl/edges.cr","line_number":26,"url":null},"def":{"name":"hash","args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"result = hasher.result\n{@u, @v}.each do |v|\n  copy = hasher\n  copy = v.hash(copy)\n  result = result &+ copy.result\nend\nresult.hash(hasher)\n"}}],"macros":[],"types":[]},{"html_id":"cgl/CGL/Visitor","path":"CGL/Visitor.html","kind":"module","full_name":"CGL::Visitor(V)","name":"Visitor","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/cgl/traversal/visitor.cr","line_number":5,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"cgl/CGL/DotVisitor","kind":"class","full_name":"CGL::DotVisitor(V)","name":"DotVisitor"}],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":"A 'Visitor' provides\n\nNote: if you care about ordering, use an iterator instead.","summary":"<p>A 'Visitor' provides</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"accept(graph:AnyGraph(V))-instance-method","html_id":"accept(graph:AnyGraph(V))-instance-method","name":"accept","doc":null,"summary":null,"abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":"AnyGraph(V)"}],"args_string":"(graph : AnyGraph(V))","args_html":"(graph : <a href=\"../CGL/AnyGraph.html\">AnyGraph</a>(V))","location":{"filename":"src/cgl/traversal/visitor.cr","line_number":16,"url":null},"def":{"name":"accept","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":"AnyGraph(V)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"visitable.accept(self)"}},{"id":"visit(visitable)-instance-method","html_id":"visit(visitable)-instance-method","name":"visit","doc":null,"summary":null,"abstract":true,"args":[{"name":"visitable","doc":null,"default_value":"","external_name":"visitable","restriction":""}],"args_string":"(visitable)","args_html":"(visitable)","location":{"filename":"src/cgl/traversal/visitor.cr","line_number":6,"url":null},"def":{"name":"visit","args":[{"name":"visitable","doc":null,"default_value":"","external_name":"visitable","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"visit_edges?:Bool-instance-method","html_id":"visit_edges?:Bool-instance-method","name":"visit_edges?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/cgl/traversal/visitor.cr","line_number":12,"url":null},"def":{"name":"visit_edges?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"true"}},{"id":"visit_vertices?:Bool-instance-method","html_id":"visit_vertices?:Bool-instance-method","name":"visit_vertices?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/cgl/traversal/visitor.cr","line_number":8,"url":null},"def":{"name":"visit_vertices?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"false"}}],"macros":[],"types":[]},{"html_id":"cgl/CGL/WDiEdge","path":"CGL/WDiEdge.html","kind":"struct","full_name":"CGL::WDiEdge(V, W)","name":"WDiEdge","abstract":false,"superclass":{"html_id":"cgl/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cgl/CGL/Weightable","kind":"module","full_name":"CGL::Weightable","name":"Weightable"},{"html_id":"cgl/CGL/Directed","kind":"module","full_name":"CGL::Directed","name":"Directed"},{"html_id":"cgl/CGL/AnyEdge","kind":"module","full_name":"CGL::AnyEdge","name":"AnyEdge"},{"html_id":"cgl/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cgl/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/edges.cr","line_number":126,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"cgl/CGL/Directed","kind":"module","full_name":"CGL::Directed","name":"Directed"},{"html_id":"cgl/CGL/Weightable","kind":"module","full_name":"CGL::Weightable","name":"Weightable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(u,v,weight)-class-method","html_id":"new(u,v,weight)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":""},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":""},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"args_string":"(u, v, weight)","args_html":"(u, v, weight)","location":{"filename":"src/cgl/edges.cr","line_number":82,"url":null},"def":{"name":"new","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":""},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":""},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = WDiEdge(V, W).allocate\n_.initialize(u, v, weight)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cgl/CGL/WEdge","path":"CGL/WEdge.html","kind":"struct","full_name":"CGL::WEdge(V, W)","name":"WEdge","abstract":false,"superclass":{"html_id":"cgl/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cgl/CGL/Weightable","kind":"module","full_name":"CGL::Weightable","name":"Weightable"},{"html_id":"cgl/CGL/Undirected","kind":"module","full_name":"CGL::Undirected","name":"Undirected"},{"html_id":"cgl/CGL/AnyEdge","kind":"module","full_name":"CGL::AnyEdge","name":"AnyEdge"},{"html_id":"cgl/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cgl/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/edges.cr","line_number":112,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"cgl/CGL/Undirected","kind":"module","full_name":"CGL::Undirected","name":"Undirected"},{"html_id":"cgl/CGL/Weightable","kind":"module","full_name":"CGL::Weightable","name":"Weightable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(u,v,weight)-class-method","html_id":"new(u,v,weight)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":""},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":""},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"args_string":"(u, v, weight)","args_html":"(u, v, weight)","location":{"filename":"src/cgl/edges.cr","line_number":82,"url":null},"def":{"name":"new","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":""},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":""},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = WEdge(V, W).allocate\n_.initialize(u, v, weight)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cgl/CGL/Weightable","path":"CGL/Weightable.html","kind":"module","full_name":"CGL::Weightable(T)","name":"Weightable","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/cgl/edges.cr","line_number":79,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"cgl/CGL/WDiEdge","kind":"struct","full_name":"CGL::WDiEdge(V, W)","name":"WDiEdge"},{"html_id":"cgl/CGL/WEdge","kind":"struct","full_name":"CGL::WEdge(V, W)","name":"WEdge"}],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(u,v,weight)-class-method","html_id":"new(u,v,weight)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":""},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":""},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"args_string":"(u, v, weight)","args_html":"(u, v, weight)","location":{"filename":"src/cgl/edges.cr","line_number":82,"url":null},"def":{"name":"new","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":""},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":""},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(u, v, weight)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:Weightable)-instance-method","html_id":"==(other:Weightable)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Weightable"}],"args_string":"(other : Weightable)","args_html":"(other : <a href=\"../CGL/Weightable.html\">Weightable</a>)","location":{"filename":"src/cgl/edges.cr","line_number":99,"url":null},"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Weightable"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(super(other)) && (@weight == other.weight)"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/edges.cr","line_number":103,"url":null},"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.new(@u.clone, @v.clone, @weight.clone)"}},{"id":"hash(hasher)-instance-method","html_id":"hash(hasher)-instance-method","name":"hash","doc":null,"summary":null,"abstract":false,"args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","location":{"filename":"src/cgl/edges.cr","line_number":94,"url":null},"def":{"name":"hash","args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"hasher = super(hasher)\n@weight.hash(hasher)\n"}},{"id":"to_tuple-instance-method","html_id":"to_tuple-instance-method","name":"to_tuple","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cgl/edges.cr","line_number":90,"url":null},"def":{"name":"to_tuple","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{@u, @v, @weight}"}},{"id":"weight:T-instance-method","html_id":"weight:T-instance-method","name":"weight","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : T","args_html":" : T","location":{"filename":"src/cgl/edges.cr","line_number":80,"url":null},"def":{"name":"weight","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"@weight"}},{"id":"weight=(weight:T)-instance-method","html_id":"weight=(weight:T)-instance-method","name":"weight=","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"T"}],"args_string":"(weight : T)","args_html":"(weight : T)","location":{"filename":"src/cgl/edges.cr","line_number":80,"url":null},"def":{"name":"weight=","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@weight = weight"}}],"macros":[],"types":[]},{"html_id":"cgl/CGL/WeightedDiGraph","path":"CGL/WeightedDiGraph.html","kind":"class","full_name":"CGL::WeightedDiGraph(V, W)","name":"WeightedDiGraph","abstract":false,"superclass":{"html_id":"cgl/CGL/AdjacencyDiGraph","kind":"class","full_name":"CGL::AdjacencyDiGraph","name":"AdjacencyDiGraph"},"ancestors":[{"html_id":"cgl/CGL/AdjacencyDiGraph","kind":"class","full_name":"CGL::AdjacencyDiGraph","name":"AdjacencyDiGraph"},{"html_id":"cgl/CGL/AdjacencyHash","kind":"module","full_name":"CGL::AdjacencyHash","name":"AdjacencyHash"},{"html_id":"cgl/CGL/AbstractDiGraph","kind":"class","full_name":"CGL::AbstractDiGraph","name":"AbstractDiGraph"},{"html_id":"cgl/CGL/AnyGraph","kind":"class","full_name":"CGL::AnyGraph","name":"AnyGraph"},{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/digraph.cr","line_number":8,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(Nil?)?=nil,*,default_weight:W?=nil,&block:->Nil?)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(Nil?)?=nil,*,default_weight:W?=nil,&block:->Nil?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(Nil?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> Nil?)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(Nil?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> Nil?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":44,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":4,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = WeightedDiGraph(V, W).allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(Nil?)?=nil,*,default_weight:W?=nil,default_label:Nil?=nil)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(Nil?)?=nil,*,default_weight:W?=nil,default_label:Nil?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(Nil?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, default_label : Nil? = <span class=\"n\">nil</span>)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(Nil?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, default_label : Nil? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":57,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":4,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = WeightedDiGraph(V, W).allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,&block:->Nil?)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,&block:->Nil?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> Nil?)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> Nil?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":70,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":1,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = WeightedDiGraph(V, W).allocate\n_.initialize(edges, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,default_label:Nil?=nil)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,default_label:Nil?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : W? = <span class=\"n\">nil</span>, default_label : Nil? = <span class=\"n\">nil</span>)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : W? = <span class=\"n\">nil</span>, default_label : Nil? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":79,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = WeightedDiGraph(V, W).allocate\n_.initialize(edges, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cgl/CGL/WeightedGraph","path":"CGL/WeightedGraph.html","kind":"class","full_name":"CGL::WeightedGraph(V, W)","name":"WeightedGraph","abstract":false,"superclass":{"html_id":"cgl/CGL/AdjacencyGraph","kind":"class","full_name":"CGL::AdjacencyGraph","name":"AdjacencyGraph"},"ancestors":[{"html_id":"cgl/CGL/AdjacencyGraph","kind":"class","full_name":"CGL::AdjacencyGraph","name":"AdjacencyGraph"},{"html_id":"cgl/CGL/AdjacencyHash","kind":"module","full_name":"CGL::AdjacencyHash","name":"AdjacencyHash"},{"html_id":"cgl/CGL/AbstractGraph","kind":"class","full_name":"CGL::AbstractGraph","name":"AbstractGraph"},{"html_id":"cgl/CGL/AnyGraph","kind":"class","full_name":"CGL::AnyGraph","name":"AnyGraph"},{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/graph.cr","line_number":8,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(Nil?)?=nil,*,default_weight:W?=nil,&block:->Nil?)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(Nil?)?=nil,*,default_weight:W?=nil,&block:->Nil?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(Nil?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> Nil?)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(Nil?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> Nil?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":44,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":4,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = WeightedGraph(V, W).allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(Nil?)?=nil,*,default_weight:W?=nil,default_label:Nil?=nil)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(Nil?)?=nil,*,default_weight:W?=nil,default_label:Nil?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(Nil?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, default_label : Nil? = <span class=\"n\">nil</span>)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(Nil?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, default_label : Nil? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":57,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":4,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = WeightedGraph(V, W).allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,&block:->Nil?)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,&block:->Nil?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> Nil?)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> Nil?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":70,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":1,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = WeightedGraph(V, W).allocate\n_.initialize(edges, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,default_label:Nil?=nil)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,default_label:Nil?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : W? = <span class=\"n\">nil</span>, default_label : Nil? = <span class=\"n\">nil</span>)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : W? = <span class=\"n\">nil</span>, default_label : Nil? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":79,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = WeightedGraph(V, W).allocate\n_.initialize(edges, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cgl/CGL/WeightedLabeledDiGraph","path":"CGL/WeightedLabeledDiGraph.html","kind":"class","full_name":"CGL::WeightedLabeledDiGraph(V, W, L)","name":"WeightedLabeledDiGraph","abstract":false,"superclass":{"html_id":"cgl/CGL/AdjacencyDiGraph","kind":"class","full_name":"CGL::AdjacencyDiGraph","name":"AdjacencyDiGraph"},"ancestors":[{"html_id":"cgl/CGL/AdjacencyDiGraph","kind":"class","full_name":"CGL::AdjacencyDiGraph","name":"AdjacencyDiGraph"},{"html_id":"cgl/CGL/AdjacencyHash","kind":"module","full_name":"CGL::AdjacencyHash","name":"AdjacencyHash"},{"html_id":"cgl/CGL/AbstractDiGraph","kind":"class","full_name":"CGL::AbstractDiGraph","name":"AbstractDiGraph"},{"html_id":"cgl/CGL/AnyGraph","kind":"class","full_name":"CGL::AnyGraph","name":"AnyGraph"},{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/digraph.cr","line_number":11,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:W?=nil,&block:->L?)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:W?=nil,&block:->L?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> L?)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> L?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":44,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":4,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = WeightedLabeledDiGraph(V, W, L).allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:W?=nil,default_label:L?=nil)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:W?=nil,default_label:L?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":57,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":4,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = WeightedLabeledDiGraph(V, W, L).allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,&block:->L?)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,&block:->L?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> L?)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> L?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":70,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":1,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = WeightedLabeledDiGraph(V, W, L).allocate\n_.initialize(edges, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,default_label:L?=nil)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,default_label:L?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : W? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : W? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":79,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = WeightedLabeledDiGraph(V, W, L).allocate\n_.initialize(edges, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cgl/CGL/WeightedLabeledGraph","path":"CGL/WeightedLabeledGraph.html","kind":"class","full_name":"CGL::WeightedLabeledGraph(V, W, L)","name":"WeightedLabeledGraph","abstract":false,"superclass":{"html_id":"cgl/CGL/AdjacencyGraph","kind":"class","full_name":"CGL::AdjacencyGraph","name":"AdjacencyGraph"},"ancestors":[{"html_id":"cgl/CGL/AdjacencyGraph","kind":"class","full_name":"CGL::AdjacencyGraph","name":"AdjacencyGraph"},{"html_id":"cgl/CGL/AdjacencyHash","kind":"module","full_name":"CGL::AdjacencyHash","name":"AdjacencyHash"},{"html_id":"cgl/CGL/AbstractGraph","kind":"class","full_name":"CGL::AbstractGraph","name":"AbstractGraph"},{"html_id":"cgl/CGL/AnyGraph","kind":"class","full_name":"CGL::AnyGraph","name":"AnyGraph"},{"html_id":"cgl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cgl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cgl/graph.cr","line_number":11,"url":null}],"repository_name":"cgl","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cgl/CGL","kind":"module","full_name":"CGL","name":"CGL"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:W?=nil,&block:->L?)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:W?=nil,&block:->L?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> L?)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> L?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":44,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":4,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = WeightedLabeledGraph(V, W, L).allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:W?=nil,default_label:L?=nil)-class-method","html_id":"new(vertices:Enumerable(V)?=nil,edges:Enumerable(Tuple(V,V))?=nil,weights:Enumerable(W)?=nil,labels:Enumerable(L?)?=nil,*,default_weight:W?=nil,default_label:L?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","args_html":"(vertices : Enumerable(V)? = <span class=\"n\">nil</span>, edges : Enumerable(Tuple(V, V))? = <span class=\"n\">nil</span>, weights : Enumerable(W)? = <span class=\"n\">nil</span>, labels : Enumerable(L?)? = <span class=\"n\">nil</span>, *, default_weight : W? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":57,"url":null},"def":{"name":"new","args":[{"name":"vertices","doc":null,"default_value":"nil","external_name":"vertices","restriction":"Enumerable(V) | ::Nil"},{"name":"edges","doc":null,"default_value":"nil","external_name":"edges","restriction":"Enumerable(Tuple(V, V)) | ::Nil"},{"name":"weights","doc":null,"default_value":"nil","external_name":"weights","restriction":"Enumerable(W) | ::Nil"},{"name":"labels","doc":null,"default_value":"nil","external_name":"labels","restriction":"Enumerable(L | ::Nil) | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":4,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = WeightedLabeledGraph(V, W, L).allocate\n_.initialize(vertices, edges, weights, labels, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,&block:->L?)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,&block:->L?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> L?)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : W? = <span class=\"n\">nil</span>, &block :  -> L?)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":70,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"}],"double_splat":null,"splat_index":1,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> L | ::Nil)"},"return_type":"","visibility":"Public","body":"_ = WeightedLabeledGraph(V, W, L).allocate\n_.initialize(edges, default_weight: default_weight, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,default_label:L?=nil)-class-method","html_id":"new(edges:Enumerable(AnyEdge(V)),*,default_weight:W?=nil,default_label:L?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"args_string":"(edges : Enumerable(AnyEdge(V)), *, default_weight : W? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","args_html":"(edges : Enumerable(<a href=\"../CGL/AnyEdge.html\">AnyEdge</a>(V)), *, default_weight : W? = <span class=\"n\">nil</span>, default_label : L? = <span class=\"n\">nil</span>)","location":{"filename":"src/cgl/representations/adjacency.cr","line_number":79,"url":null},"def":{"name":"new","args":[{"name":"edges","doc":null,"default_value":"","external_name":"edges","restriction":"Enumerable(AnyEdge(V))"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"default_weight","doc":null,"default_value":"nil","external_name":"default_weight","restriction":"W | ::Nil"},{"name":"default_label","doc":null,"default_value":"nil","external_name":"default_label","restriction":"L | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = WeightedLabeledGraph(V, W, L).allocate\n_.initialize(edges, default_weight: default_weight, default_label: default_label)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]}]}]}})